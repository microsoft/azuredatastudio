<?xml version="1.0" encoding="utf-8"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">
  <file original="extensions/git/dist/actionButton" source-language="en" datatype="plaintext"><body>
    <trans-unit id="scm button publish branch">
      <source xml:lang="en">Publish Branch</source>
    </trans-unit>
    <trans-unit id="scm button publish branch running">
      <source xml:lang="en">Publishing Branch...</source>
    </trans-unit>
    <trans-unit id="scm button publish title">
      <source xml:lang="en">$(cloud-upload) Publish Branch</source>
    </trans-unit>
    <trans-unit id="scm button sync description">
      <source xml:lang="en">{0} Sync Changes {1}{2}</source>
    </trans-unit>
    <trans-unit id="scm button sync title">
      <source xml:lang="en">{0} {1}{2}</source>
    </trans-unit>
    <trans-unit id="syncing changes">
      <source xml:lang="en">Synchronizing Changes...</source>
    </trans-unit>
</body></file>
  <file original="extensions/git/dist/askpass-main" source-language="en" datatype="plaintext"><body>
    <trans-unit id="missOrInvalid">
      <source xml:lang="en">Missing or invalid credentials.</source>
    </trans-unit>
</body></file>
  <file original="extensions/git/dist/autofetch" source-language="en" datatype="plaintext"><body>
    <trans-unit id="no">
      <source xml:lang="en">No</source>
    </trans-unit>
    <trans-unit id="not now">
      <source xml:lang="en">Ask Me Later</source>
    </trans-unit>
    <trans-unit id="suggest auto fetch">
      <source xml:lang="en">Would you like Azure Data Studio to [periodically run 'git fetch']({0})?</source>
    </trans-unit>
    <trans-unit id="yes">
      <source xml:lang="en">Yes</source>
    </trans-unit>
</body></file>
  <file original="extensions/git/dist/commands" source-language="en" datatype="plaintext"><body>
    <trans-unit id="HEAD not available">
      <source xml:lang="en">HEAD version of '{0}' is not available.</source>
    </trans-unit>
    <trans-unit id="add">
      <source xml:lang="en">Add to Workspace</source>
    </trans-unit>
    <trans-unit id="add remote">
      <source xml:lang="en">Add a new remote...</source>
    </trans-unit>
    <trans-unit id="addFrom">
      <source xml:lang="en">Add remote from URL</source>
    </trans-unit>
    <trans-unit id="addfrom">
      <source xml:lang="en">Add remote from {0}</source>
    </trans-unit>
    <trans-unit id="addremote">
      <source xml:lang="en">Add Remote</source>
    </trans-unit>
    <trans-unit id="always">
      <source xml:lang="en">Always</source>
    </trans-unit>
    <trans-unit id="are you sure">
      <source xml:lang="en">This will create a Git repository in '{0}'. Are you sure you want to continue?</source>
    </trans-unit>
    <trans-unit id="auth failed">
      <source xml:lang="en">Failed to authenticate to git remote.</source>
    </trans-unit>
    <trans-unit id="auth failed specific">
      <source xml:lang="en">Failed to authenticate to git remote:

{0}</source>
    </trans-unit>
    <trans-unit id="branch already exists">
      <source xml:lang="en">A branch named '{0}' already exists</source>
    </trans-unit>
    <trans-unit id="branch name">
      <source xml:lang="en">Branch name</source>
    </trans-unit>
    <trans-unit id="branch name format invalid">
      <source xml:lang="en">Branch name needs to match regex: {0}</source>
    </trans-unit>
    <trans-unit id="cant push">
      <source xml:lang="en">Can't push refs to remote. Try running 'Pull' first to integrate your changes.</source>
    </trans-unit>
    <trans-unit id="changed">
      <source xml:lang="en">{0} Log level changed to: {1}</source>
    </trans-unit>
    <trans-unit id="checkout detached">
      <source xml:lang="en">Checkout detached...</source>
    </trans-unit>
    <trans-unit id="choose">
      <source xml:lang="en">Choose Folder...</source>
    </trans-unit>
    <trans-unit id="clean repo">
      <source xml:lang="en">Please clean your repository working tree before checkout.</source>
    </trans-unit>
    <trans-unit id="clonefrom">
      <source xml:lang="en">Clone from {0}</source>
    </trans-unit>
    <trans-unit id="cloning">
      <source xml:lang="en">Cloning git repository '{0}'...</source>
    </trans-unit>
    <trans-unit id="commit">
      <source xml:lang="en">Commit Staged Changes</source>
    </trans-unit>
    <trans-unit id="commit anyway">
      <source xml:lang="en">Create Empty Commit</source>
    </trans-unit>
    <trans-unit id="commit hash">
      <source xml:lang="en">Commit Hash</source>
    </trans-unit>
    <trans-unit id="commit message">
      <source xml:lang="en">Commit message</source>
    </trans-unit>
    <trans-unit id="commitMessageWithHeadLabel2">
      <source xml:lang="en">Message (commit on '{0}')</source>
    </trans-unit>
    <trans-unit id="confirm delete">
      <source xml:lang="en">Are you sure you want to DELETE {0}?
This is IRREVERSIBLE!
This file will be FOREVER LOST if you proceed.</source>
    </trans-unit>
    <trans-unit id="confirm delete multiple">
      <source xml:lang="en">Are you sure you want to DELETE {0} files?
This is IRREVERSIBLE!
These files will be FOREVER LOST if you proceed.</source>
    </trans-unit>
    <trans-unit id="confirm discard">
      <source xml:lang="en">Are you sure you want to discard changes in {0}?</source>
    </trans-unit>
    <trans-unit id="confirm discard all">
      <source xml:lang="en">Are you sure you want to discard ALL changes in {0} files?
This is IRREVERSIBLE!
Your current working set will be FOREVER LOST if you proceed.</source>
    </trans-unit>
    <trans-unit id="confirm discard all 2">
      <source xml:lang="en">{0}

This is IRREVERSIBLE, your current working set will be FOREVER LOST.</source>
    </trans-unit>
    <trans-unit id="confirm discard all single">
      <source xml:lang="en">Are you sure you want to discard changes in {0}?</source>
    </trans-unit>
    <trans-unit id="confirm discard multiple">
      <source xml:lang="en">Are you sure you want to discard changes in {0} files?</source>
    </trans-unit>
    <trans-unit id="confirm emtpy commit">
      <source xml:lang="en">Are you sure you want to create an empty commit?</source>
    </trans-unit>
    <trans-unit id="confirm force delete branch">
      <source xml:lang="en">The branch '{0}' is not fully merged. Delete anyway?</source>
    </trans-unit>
    <trans-unit id="confirm force push">
      <source xml:lang="en">You are about to force push your changes, this can be destructive and could inadvertently overwrite changes made by others.

Are you sure to continue?</source>
    </trans-unit>
    <trans-unit id="confirm no verify commit">
      <source xml:lang="en">You are about to commit your changes without verification, this skips pre-commit hooks and can be undesirable.

Are you sure to continue?</source>
    </trans-unit>
    <trans-unit id="confirm publish branch">
      <source xml:lang="en">The branch '{0}' has no remote branch. Would you like to publish this branch?</source>
    </trans-unit>
    <trans-unit id="confirm restore">
      <source xml:lang="en">Are you sure you want to restore {0}?</source>
    </trans-unit>
    <trans-unit id="confirm restore multiple">
      <source xml:lang="en">Are you sure you want to restore {0} files?</source>
    </trans-unit>
    <trans-unit id="confirm stage file with merge conflicts">
      <source xml:lang="en">Are you sure you want to stage {0} with merge conflicts?</source>
    </trans-unit>
    <trans-unit id="confirm stage files with merge conflicts">
      <source xml:lang="en">Are you sure you want to stage {0} files with merge conflicts?</source>
    </trans-unit>
    <trans-unit id="create branch">
      <source xml:lang="en">Create new branch...</source>
    </trans-unit>
    <trans-unit id="create branch from">
      <source xml:lang="en">Create new branch from...</source>
    </trans-unit>
    <trans-unit id="create repo">
      <source xml:lang="en">Initialize Repository</source>
    </trans-unit>
    <trans-unit id="current">
      <source xml:lang="en">Current</source>
    </trans-unit>
    <trans-unit id="delete">
      <source xml:lang="en">Delete File</source>
    </trans-unit>
    <trans-unit id="delete branch">
      <source xml:lang="en">Delete Branch</source>
    </trans-unit>
    <trans-unit id="delete file">
      <source xml:lang="en">Delete file</source>
    </trans-unit>
    <trans-unit id="delete files">
      <source xml:lang="en">Delete Files</source>
    </trans-unit>
    <trans-unit id="deleted by them">
      <source xml:lang="en">File '{0}' was deleted by them and modified by us.

What would you like to do?</source>
    </trans-unit>
    <trans-unit id="deleted by us">
      <source xml:lang="en">File '{0}' was deleted by us and modified by them.

What would you like to do?</source>
    </trans-unit>
    <trans-unit id="discard">
      <source xml:lang="en">Discard Changes</source>
    </trans-unit>
    <trans-unit id="discardAll">
      <source xml:lang="en">Discard All {0} Files</source>
    </trans-unit>
    <trans-unit id="discardAll multiple">
      <source xml:lang="en">Discard 1 File</source>
    </trans-unit>
    <trans-unit id="drop all stashes">
      <source xml:lang="en">Are you sure you want to drop ALL stashes? There are {0} stashes that will be subject to pruning, and MAY BE IMPOSSIBLE TO RECOVER.</source>
    </trans-unit>
    <trans-unit id="drop one stash">
      <source xml:lang="en">Are you sure you want to drop ALL stashes? There is 1 stash that will be subject to pruning, and MAY BE IMPOSSIBLE TO RECOVER.</source>
    </trans-unit>
    <trans-unit id="force">
      <source xml:lang="en">Force Checkout</source>
    </trans-unit>
    <trans-unit id="force push not allowed">
      <source xml:lang="en">Force push is not allowed, please enable it with the 'git.allowForcePush' setting.</source>
    </trans-unit>
    <trans-unit id="git error">
      <source xml:lang="en">Git error</source>
    </trans-unit>
    <trans-unit id="git error details">
      <source xml:lang="en">Git: {0}</source>
    </trans-unit>
    <trans-unit id="git.timeline.openDiffCommand">
      <source xml:lang="en">Open Comparison</source>
    </trans-unit>
    <trans-unit id="git.title.diff">
      <source xml:lang="en">{0} ↔ {1}</source>
    </trans-unit>
    <trans-unit id="git.title.diffRefs">
      <source xml:lang="en">{0} ({1}) ↔ {0} ({2})</source>
    </trans-unit>
    <trans-unit id="git.title.index">
      <source xml:lang="en">{0} (Index)</source>
    </trans-unit>
    <trans-unit id="git.title.ref">
      <source xml:lang="en">{0} ({1})</source>
    </trans-unit>
    <trans-unit id="git.title.workingTree">
      <source xml:lang="en">{0} (Working Tree)</source>
    </trans-unit>
    <trans-unit id="init">
      <source xml:lang="en">Pick workspace folder to initialize git repo in</source>
    </trans-unit>
    <trans-unit id="init repo">
      <source xml:lang="en">Initialize Repository</source>
    </trans-unit>
    <trans-unit id="invalid branch name">
      <source xml:lang="en">Invalid branch name</source>
    </trans-unit>
    <trans-unit id="keep ours">
      <source xml:lang="en">Keep Our Version</source>
    </trans-unit>
    <trans-unit id="keep theirs">
      <source xml:lang="en">Keep Their Version</source>
    </trans-unit>
    <trans-unit id="learn more">
      <source xml:lang="en">Learn More</source>
    </trans-unit>
    <trans-unit id="local changes">
      <source xml:lang="en">Your local changes would be overwritten by checkout.</source>
    </trans-unit>
    <trans-unit id="merge commit">
      <source xml:lang="en">The last commit was a merge commit. Are you sure you want to undo it?</source>
    </trans-unit>
    <trans-unit id="merge conflicts">
      <source xml:lang="en">There are merge conflicts. Resolve them before committing.</source>
    </trans-unit>
    <trans-unit id="missing user info">
      <source xml:lang="en">Make sure you configure your 'user.name' and 'user.email' in git.</source>
    </trans-unit>
    <trans-unit id="never">
      <source xml:lang="en">Never</source>
    </trans-unit>
    <trans-unit id="never again">
      <source xml:lang="en">OK, Don't Show Again</source>
    </trans-unit>
    <trans-unit id="never ask again">
      <source xml:lang="en">OK, Don't Ask Again</source>
    </trans-unit>
    <trans-unit id="no changes">
      <source xml:lang="en">There are no changes to commit.</source>
    </trans-unit>
    <trans-unit id="no changes stash">
      <source xml:lang="en">There are no changes to stash.</source>
    </trans-unit>
    <trans-unit id="no more">
      <source xml:lang="en">Can't undo because HEAD doesn't point to any commit.</source>
    </trans-unit>
    <trans-unit id="no rebase">
      <source xml:lang="en">No rebase in progress.</source>
    </trans-unit>
    <trans-unit id="no remotes added">
      <source xml:lang="en">Your repository has no remotes.</source>
    </trans-unit>
    <trans-unit id="no remotes to fetch">
      <source xml:lang="en">This repository has no remotes configured to fetch from.</source>
    </trans-unit>
    <trans-unit id="no remotes to publish">
      <source xml:lang="en">Your repository has no remotes configured to publish to.</source>
    </trans-unit>
    <trans-unit id="no remotes to pull">
      <source xml:lang="en">Your repository has no remotes configured to pull from.</source>
    </trans-unit>
    <trans-unit id="no remotes to push">
      <source xml:lang="en">Your repository has no remotes configured to push to.</source>
    </trans-unit>
    <trans-unit id="no staged changes">
      <source xml:lang="en">There are no staged changes to commit.

Would you like to stage all your changes and commit them directly?</source>
    </trans-unit>
    <trans-unit id="no stashes">
      <source xml:lang="en">There are no stashes in the repository.</source>
    </trans-unit>
    <trans-unit id="no tags">
      <source xml:lang="en">This repository has no tags.</source>
    </trans-unit>
    <trans-unit id="no verify commit not allowed">
      <source xml:lang="en">Commits without verification are not allowed, please enable them with the 'git.allowNoVerifyCommit' setting.</source>
    </trans-unit>
    <trans-unit id="nobranch">
      <source xml:lang="en">Please check out a branch to push to a remote.</source>
    </trans-unit>
    <trans-unit id="ok">
      <source xml:lang="en">OK</source>
    </trans-unit>
    <trans-unit id="open git log">
      <source xml:lang="en">Open Git Log</source>
    </trans-unit>
    <trans-unit id="open repo">
      <source xml:lang="en">Open Repository</source>
    </trans-unit>
    <trans-unit id="openrepo">
      <source xml:lang="en">Open</source>
    </trans-unit>
    <trans-unit id="openreponew">
      <source xml:lang="en">Open in New Window</source>
    </trans-unit>
    <trans-unit id="pick branch pull">
      <source xml:lang="en">Pick a branch to pull from</source>
    </trans-unit>
    <trans-unit id="pick provider">
      <source xml:lang="en">Pick a provider to publish the branch '{0}' to:</source>
    </trans-unit>
    <trans-unit id="pick remote">
      <source xml:lang="en">Pick a remote to publish the branch '{0}' to:</source>
    </trans-unit>
    <trans-unit id="pick remote pull repo">
      <source xml:lang="en">Pick a remote to pull the branch from</source>
    </trans-unit>
    <trans-unit id="pick stash to apply">
      <source xml:lang="en">Pick a stash to apply</source>
    </trans-unit>
    <trans-unit id="pick stash to drop">
      <source xml:lang="en">Pick a stash to drop</source>
    </trans-unit>
    <trans-unit id="pick stash to pop">
      <source xml:lang="en">Pick a stash to pop</source>
    </trans-unit>
    <trans-unit id="proposeopen">
      <source xml:lang="en">Would you like to open the cloned repository?</source>
    </trans-unit>
    <trans-unit id="proposeopen init">
      <source xml:lang="en">Would you like to open the initialized repository?</source>
    </trans-unit>
    <trans-unit id="proposeopen2">
      <source xml:lang="en">Would you like to open the cloned repository, or add it to the current workspace?</source>
    </trans-unit>
    <trans-unit id="proposeopen2 init">
      <source xml:lang="en">Would you like to open the initialized repository, or add it to the current workspace?</source>
    </trans-unit>
    <trans-unit id="provide branch name">
      <source xml:lang="en">Please provide a new branch name</source>
    </trans-unit>
    <trans-unit id="provide commit hash">
      <source xml:lang="en">Please provide the commit hash</source>
    </trans-unit>
    <trans-unit id="provide commit message">
      <source xml:lang="en">Please provide a commit message</source>
    </trans-unit>
    <trans-unit id="provide remote name">
      <source xml:lang="en">Please provide a remote name</source>
    </trans-unit>
    <trans-unit id="provide stash message">
      <source xml:lang="en">Optionally provide a stash message</source>
    </trans-unit>
    <trans-unit id="provide tag message">
      <source xml:lang="en">Please provide a message to annotate the tag</source>
    </trans-unit>
    <trans-unit id="provide tag name">
      <source xml:lang="en">Please provide a tag name</source>
    </trans-unit>
    <trans-unit id="publish to">
      <source xml:lang="en">Publish to {0}</source>
    </trans-unit>
    <trans-unit id="remote already exists">
      <source xml:lang="en">Remote '{0}' already exists.</source>
    </trans-unit>
    <trans-unit id="remote branch at">
      <source xml:lang="en">Remote branch at {0}</source>
    </trans-unit>
    <trans-unit id="remote name">
      <source xml:lang="en">Remote name</source>
    </trans-unit>
    <trans-unit id="remote name format invalid">
      <source xml:lang="en">Remote name format invalid</source>
    </trans-unit>
    <trans-unit id="remove remote">
      <source xml:lang="en">Pick a remote to remove</source>
    </trans-unit>
    <trans-unit id="repourl">
      <source xml:lang="en">Clone from URL</source>
    </trans-unit>
    <trans-unit id="restore file">
      <source xml:lang="en">Restore file</source>
    </trans-unit>
    <trans-unit id="restore files">
      <source xml:lang="en">Restore files</source>
    </trans-unit>
    <trans-unit id="save and commit">
      <source xml:lang="en">Save All &amp; Commit</source>
    </trans-unit>
    <trans-unit id="save and stash">
      <source xml:lang="en">Save All &amp; Stash</source>
    </trans-unit>
    <trans-unit id="select a branch to merge from">
      <source xml:lang="en">Select a branch to merge from</source>
    </trans-unit>
    <trans-unit id="select a branch to rebase onto">
      <source xml:lang="en">Select a branch to rebase onto</source>
    </trans-unit>
    <trans-unit id="select a ref to checkout">
      <source xml:lang="en">Select a ref to checkout</source>
    </trans-unit>
    <trans-unit id="select a ref to checkout detached">
      <source xml:lang="en">Select a ref to checkout in detached mode</source>
    </trans-unit>
    <trans-unit id="select a ref to create a new branch from">
      <source xml:lang="en">Select a ref to create the '{0}' branch from</source>
    </trans-unit>
    <trans-unit id="select a tag to delete">
      <source xml:lang="en">Select a tag to delete</source>
    </trans-unit>
    <trans-unit id="select branch to delete">
      <source xml:lang="en">Select a branch to delete</source>
    </trans-unit>
    <trans-unit id="select log level">
      <source xml:lang="en">Select log level</source>
    </trans-unit>
    <trans-unit id="selectFolder">
      <source xml:lang="en">Select Repository Location</source>
    </trans-unit>
    <trans-unit id="show command output">
      <source xml:lang="en">Show Command Output</source>
    </trans-unit>
    <trans-unit id="stash">
      <source xml:lang="en">Stash Anyway</source>
    </trans-unit>
    <trans-unit id="stash merge conflicts">
      <source xml:lang="en">There were merge conflicts while applying the stash.</source>
    </trans-unit>
    <trans-unit id="stash message">
      <source xml:lang="en">Stash message</source>
    </trans-unit>
    <trans-unit id="stashcheckout">
      <source xml:lang="en">Stash &amp; Checkout</source>
    </trans-unit>
    <trans-unit id="sure drop">
      <source xml:lang="en">Are you sure you want to drop the stash: {0}?</source>
    </trans-unit>
    <trans-unit id="sync is unpredictable">
      <source xml:lang="en">This action will pull and push commits from and to '{0}/{1}'.</source>
    </trans-unit>
    <trans-unit id="tag at">
      <source xml:lang="en">Tag at {0}</source>
    </trans-unit>
    <trans-unit id="tag message">
      <source xml:lang="en">Message</source>
    </trans-unit>
    <trans-unit id="tag name">
      <source xml:lang="en">Tag name</source>
    </trans-unit>
    <trans-unit id="there are untracked files">
      <source xml:lang="en">There are {0} untracked files which will be DELETED FROM DISK if discarded.</source>
    </trans-unit>
    <trans-unit id="there are untracked files single">
      <source xml:lang="en">The following untracked file will be DELETED FROM DISK if discarded: {0}.</source>
    </trans-unit>
    <trans-unit id="undo commit">
      <source xml:lang="en">Undo merge commit</source>
    </trans-unit>
    <trans-unit id="unsaved files">
      <source xml:lang="en">There are {0} unsaved files.

Would you like to save them before committing?</source>
    </trans-unit>
    <trans-unit id="unsaved files single">
      <source xml:lang="en">The following file has unsaved changes which won't be included in the commit if you proceed: {0}.

Would you like to save it before committing?</source>
    </trans-unit>
    <trans-unit id="unsaved stash files">
      <source xml:lang="en">There are {0} unsaved files.

Would you like to save them before stashing?</source>
    </trans-unit>
    <trans-unit id="unsaved stash files single">
      <source xml:lang="en">The following file has unsaved changes which won't be included in the stash if you proceed: {0}.

Would you like to save it before stashing?</source>
    </trans-unit>
    <trans-unit id="warn untracked">
      <source xml:lang="en">This will DELETE {0} untracked files!
This is IRREVERSIBLE!
These files will be FOREVER LOST.</source>
    </trans-unit>
    <trans-unit id="yes">
      <source xml:lang="en">Yes</source>
    </trans-unit>
    <trans-unit id="yes discard tracked">
      <source xml:lang="en">Discard 1 Tracked File</source>
    </trans-unit>
    <trans-unit id="yes discard tracked multiple">
      <source xml:lang="en">Discard {0} Tracked Files</source>
    </trans-unit>
    <trans-unit id="yes never again">
      <source xml:lang="en">Yes, Don't Show Again</source>
    </trans-unit>
</body></file>
  <file original="extensions/git/dist/main" source-language="en" datatype="plaintext"><body>
    <trans-unit id="skipped">
      <source xml:lang="en">{0} Skipped found git in: {1}</source>
    </trans-unit>
    <trans-unit id="using git">
      <source xml:lang="en">{0} Using git {1} from {2}</source>
    </trans-unit>
    <trans-unit id="validating">
      <source xml:lang="en">{0} Validating found git in: {1}</source>
    </trans-unit>
</body></file>
  <file original="extensions/git/dist/model" source-language="en" datatype="plaintext"><body>
    <trans-unit id="no repositories">
      <source xml:lang="en">There are no available repositories</source>
    </trans-unit>
    <trans-unit id="not supported">
      <source xml:lang="en">Absolute paths not supported in 'git.scanRepositories' setting.</source>
    </trans-unit>
    <trans-unit id="pick repo">
      <source xml:lang="en">Choose a repository</source>
    </trans-unit>
    <trans-unit id="repoOnHomeDriveRootWarning">
      <source xml:lang="en">Unable to automatically open the git repository at '{0}'. To open that git repository, open it directly as a folder in VS Code.</source>
    </trans-unit>
    <trans-unit id="too many submodules">
      <source xml:lang="en">The '{0}' repository has {1} submodules which won't be opened automatically. You can still open each one individually by opening a file within.</source>
    </trans-unit>
</body></file>
  <file original="extensions/git/dist/repository" source-language="en" datatype="plaintext"><body>
    <trans-unit id="add known">
      <source xml:lang="en">Would you like to add '{0}' to .gitignore?</source>
    </trans-unit>
    <trans-unit id="added by them">
      <source xml:lang="en">Conflict: Added By Them</source>
    </trans-unit>
    <trans-unit id="added by us">
      <source xml:lang="en">Conflict: Added By Us</source>
    </trans-unit>
    <trans-unit id="always pull">
      <source xml:lang="en">Always Pull</source>
    </trans-unit>
    <trans-unit id="both added">
      <source xml:lang="en">Conflict: Both Added</source>
    </trans-unit>
    <trans-unit id="both deleted">
      <source xml:lang="en">Conflict: Both Deleted</source>
    </trans-unit>
    <trans-unit id="both modified">
      <source xml:lang="en">Conflict: Both Modified</source>
    </trans-unit>
    <trans-unit id="changes">
      <source xml:lang="en">Changes</source>
    </trans-unit>
    <trans-unit id="commit">
      <source xml:lang="en">Commit</source>
    </trans-unit>
    <trans-unit id="commit in rebase">
      <source xml:lang="en">It's not possible to change the commit message in the middle of a rebase. Please complete the rebase operation and use interactive rebase instead.</source>
    </trans-unit>
    <trans-unit id="commitMessage">
      <source xml:lang="en">Message ({0} to commit)</source>
    </trans-unit>
    <trans-unit id="commitMessageCountdown">
      <source xml:lang="en">{0} characters left in current line</source>
    </trans-unit>
    <trans-unit id="commitMessageWarning">
      <source xml:lang="en">{0} characters over {1} in current line</source>
    </trans-unit>
    <trans-unit id="commitMessageWhitespacesOnlyWarning">
      <source xml:lang="en">Current commit message only contains whitespace characters</source>
    </trans-unit>
    <trans-unit id="commitMessageWithHeadLabel">
      <source xml:lang="en">Message ({0} to commit on '{1}')</source>
    </trans-unit>
    <trans-unit id="deleted">
      <source xml:lang="en">Deleted</source>
    </trans-unit>
    <trans-unit id="deleted by them">
      <source xml:lang="en">Conflict: Deleted By Them</source>
    </trans-unit>
    <trans-unit id="deleted by us">
      <source xml:lang="en">Conflict: Deleted By Us</source>
    </trans-unit>
    <trans-unit id="dont pull">
      <source xml:lang="en">Don't Pull</source>
    </trans-unit>
    <trans-unit id="git.title.deleted">
      <source xml:lang="en">{0} (Deleted)</source>
    </trans-unit>
    <trans-unit id="git.title.index">
      <source xml:lang="en">{0} (Index)</source>
    </trans-unit>
    <trans-unit id="git.title.ours">
      <source xml:lang="en">{0} (Ours)</source>
    </trans-unit>
    <trans-unit id="git.title.theirs">
      <source xml:lang="en">{0} (Theirs)</source>
    </trans-unit>
    <trans-unit id="git.title.untracked">
      <source xml:lang="en">{0} (Untracked)</source>
    </trans-unit>
    <trans-unit id="git.title.workingTree">
      <source xml:lang="en">{0} (Working Tree)</source>
    </trans-unit>
    <trans-unit id="huge">
      <source xml:lang="en">The git repository at '{0}' has too many active changes, only a subset of Git features will be enabled.</source>
    </trans-unit>
    <trans-unit id="ignored">
      <source xml:lang="en">Ignored</source>
    </trans-unit>
    <trans-unit id="index added">
      <source xml:lang="en">Index Added</source>
    </trans-unit>
    <trans-unit id="index copied">
      <source xml:lang="en">Index Copied</source>
    </trans-unit>
    <trans-unit id="index deleted">
      <source xml:lang="en">Index Deleted</source>
    </trans-unit>
    <trans-unit id="index modified">
      <source xml:lang="en">Index Modified</source>
    </trans-unit>
    <trans-unit id="index renamed">
      <source xml:lang="en">Index Renamed</source>
    </trans-unit>
    <trans-unit id="intent to add">
      <source xml:lang="en">Intent to Add</source>
    </trans-unit>
    <trans-unit id="merge changes">
      <source xml:lang="en">Merge Changes</source>
    </trans-unit>
    <trans-unit id="modified">
      <source xml:lang="en">Modified</source>
    </trans-unit>
    <trans-unit id="neveragain">
      <source xml:lang="en">Don't Show Again</source>
    </trans-unit>
    <trans-unit id="no">
      <source xml:lang="en">No</source>
    </trans-unit>
    <trans-unit id="ok">
      <source xml:lang="en">OK</source>
    </trans-unit>
    <trans-unit id="open">
      <source xml:lang="en">Open</source>
    </trans-unit>
    <trans-unit id="pull">
      <source xml:lang="en">Pull</source>
    </trans-unit>
    <trans-unit id="pull branch maybe rebased">
      <source xml:lang="en">It looks like the current branch '{0}' might have been rebased. Are you sure you still want to pull into it?</source>
    </trans-unit>
    <trans-unit id="pull maybe rebased">
      <source xml:lang="en">It looks like the current branch might have been rebased. Are you sure you still want to pull into it?</source>
    </trans-unit>
    <trans-unit id="pull n">
      <source xml:lang="en">Pull {0} commits from {1}/{2}</source>
    </trans-unit>
    <trans-unit id="pull push n">
      <source xml:lang="en">Pull {0} and push {1} commits between {2}/{3}</source>
    </trans-unit>
    <trans-unit id="push n">
      <source xml:lang="en">Push {0} commits to {1}/{2}</source>
    </trans-unit>
    <trans-unit id="push success">
      <source xml:lang="en">Successfully pushed.</source>
    </trans-unit>
    <trans-unit id="staged changes">
      <source xml:lang="en">Staged Changes</source>
    </trans-unit>
    <trans-unit id="sync changes">
      <source xml:lang="en">Synchronize Changes</source>
    </trans-unit>
    <trans-unit id="sync is unpredictable">
      <source xml:lang="en">Syncing. Cancelling may cause serious damages to the repository</source>
    </trans-unit>
    <trans-unit id="tooManyChangesWarning">
      <source xml:lang="en">Too many changes were detected. Only the first {0} changes will be shown below.</source>
    </trans-unit>
    <trans-unit id="untracked">
      <source xml:lang="en">Untracked</source>
    </trans-unit>
    <trans-unit id="untracked changes">
      <source xml:lang="en">Untracked Changes</source>
    </trans-unit>
    <trans-unit id="yes">
      <source xml:lang="en">Yes</source>
    </trans-unit>
</body></file>
  <file original="extensions/git/dist/statusbar" source-language="en" datatype="plaintext"><body>
    <trans-unit id="checkout">
      <source xml:lang="en">Checkout branch/tag...</source>
    </trans-unit>
    <trans-unit id="publish branch">
      <source xml:lang="en">Publish Branch</source>
    </trans-unit>
    <trans-unit id="publish to">
      <source xml:lang="en">Publish to {0}</source>
    </trans-unit>
    <trans-unit id="publish to...">
      <source xml:lang="en">Publish to...</source>
    </trans-unit>
    <trans-unit id="rebasing">
      <source xml:lang="en">Rebasing</source>
    </trans-unit>
    <trans-unit id="syncing changes">
      <source xml:lang="en">Synchronizing Changes...</source>
    </trans-unit>
</body></file>
  <file original="extensions/git/dist/timelineProvider" source-language="en" datatype="plaintext"><body>
    <trans-unit id="git.timeline.email">
      <source xml:lang="en">Email</source>
    </trans-unit>
    <trans-unit id="git.timeline.openComparison">
      <source xml:lang="en">Open Comparison</source>
    </trans-unit>
    <trans-unit id="git.timeline.source">
      <source xml:lang="en">Git History</source>
    </trans-unit>
    <trans-unit id="git.timeline.stagedChanges">
      <source xml:lang="en">Staged Changes</source>
    </trans-unit>
    <trans-unit id="git.timeline.uncommitedChanges">
      <source xml:lang="en">Uncommitted Changes</source>
    </trans-unit>
    <trans-unit id="git.timeline.you">
      <source xml:lang="en">You</source>
    </trans-unit>
</body></file>
  <file original="extensions/git/package" source-language="en" datatype="plaintext"><body>
    <trans-unit id="colors.added">
      <source xml:lang="en">Color for added resources.</source>
    </trans-unit>
    <trans-unit id="colors.conflict">
      <source xml:lang="en">Color for resources with conflicts.</source>
    </trans-unit>
    <trans-unit id="colors.deleted">
      <source xml:lang="en">Color for deleted resources.</source>
    </trans-unit>
    <trans-unit id="colors.ignored">
      <source xml:lang="en">Color for ignored resources.</source>
    </trans-unit>
    <trans-unit id="colors.modified">
      <source xml:lang="en">Color for modified resources.</source>
    </trans-unit>
    <trans-unit id="colors.renamed">
      <source xml:lang="en">Color for renamed or copied resources.</source>
    </trans-unit>
    <trans-unit id="colors.stageDeleted">
      <source xml:lang="en">Color for deleted resources which have been staged.</source>
    </trans-unit>
    <trans-unit id="colors.stageModified">
      <source xml:lang="en">Color for modified resources which have been staged.</source>
    </trans-unit>
    <trans-unit id="colors.submodule">
      <source xml:lang="en">Color for submodule resources.</source>
    </trans-unit>
    <trans-unit id="colors.untracked">
      <source xml:lang="en">Color for untracked resources.</source>
    </trans-unit>
    <trans-unit id="command.addRemote">
      <source xml:lang="en">Add Remote...</source>
    </trans-unit>
    <trans-unit id="command.api.getRemoteSources">
      <source xml:lang="en">Get Remote Sources</source>
    </trans-unit>
    <trans-unit id="command.api.getRepositories">
      <source xml:lang="en">Get Repositories</source>
    </trans-unit>
    <trans-unit id="command.api.getRepositoryState">
      <source xml:lang="en">Get Repository State</source>
    </trans-unit>
    <trans-unit id="command.branch">
      <source xml:lang="en">Create Branch...</source>
    </trans-unit>
    <trans-unit id="command.branchFrom">
      <source xml:lang="en">Create Branch From...</source>
    </trans-unit>
    <trans-unit id="command.checkout">
      <source xml:lang="en">Checkout to...</source>
    </trans-unit>
    <trans-unit id="command.checkoutDetached">
      <source xml:lang="en">Checkout to (Detached)...</source>
    </trans-unit>
    <trans-unit id="command.cherryPick">
      <source xml:lang="en">Cherry Pick...</source>
    </trans-unit>
    <trans-unit id="command.clean">
      <source xml:lang="en">Discard Changes</source>
    </trans-unit>
    <trans-unit id="command.cleanAll">
      <source xml:lang="en">Discard All Changes</source>
    </trans-unit>
    <trans-unit id="command.cleanAllTracked">
      <source xml:lang="en">Discard All Tracked Changes</source>
    </trans-unit>
    <trans-unit id="command.cleanAllUntracked">
      <source xml:lang="en">Discard All Untracked Changes</source>
    </trans-unit>
    <trans-unit id="command.clone">
      <source xml:lang="en">Clone</source>
    </trans-unit>
    <trans-unit id="command.cloneRecursive">
      <source xml:lang="en">Clone (Recursive)</source>
    </trans-unit>
    <trans-unit id="command.close">
      <source xml:lang="en">Close Repository</source>
    </trans-unit>
    <trans-unit id="command.closeAllDiffEditors">
      <source xml:lang="en">Close All Diff Editors</source>
    </trans-unit>
    <trans-unit id="command.commit">
      <source xml:lang="en">Commit</source>
    </trans-unit>
    <trans-unit id="command.commitAll">
      <source xml:lang="en">Commit All</source>
    </trans-unit>
    <trans-unit id="command.commitAllAmend">
      <source xml:lang="en">Commit All (Amend)</source>
    </trans-unit>
    <trans-unit id="command.commitAllAmendNoVerify">
      <source xml:lang="en">Commit All (Amend, No Verify)</source>
    </trans-unit>
    <trans-unit id="command.commitAllNoVerify">
      <source xml:lang="en">Commit All (No Verify)</source>
    </trans-unit>
    <trans-unit id="command.commitAllSigned">
      <source xml:lang="en">Commit All (Signed Off)</source>
    </trans-unit>
    <trans-unit id="command.commitAllSignedNoVerify">
      <source xml:lang="en">Commit All (Signed Off, No Verify)</source>
    </trans-unit>
    <trans-unit id="command.commitEmpty">
      <source xml:lang="en">Commit Empty</source>
    </trans-unit>
    <trans-unit id="command.commitEmptyNoVerify">
      <source xml:lang="en">Commit Empty (No Verify)</source>
    </trans-unit>
    <trans-unit id="command.commitNoVerify">
      <source xml:lang="en">Commit (No Verify)</source>
    </trans-unit>
    <trans-unit id="command.commitStaged">
      <source xml:lang="en">Commit Staged</source>
    </trans-unit>
    <trans-unit id="command.commitStagedAmend">
      <source xml:lang="en">Commit Staged (Amend)</source>
    </trans-unit>
    <trans-unit id="command.commitStagedAmendNoVerify">
      <source xml:lang="en">Commit Staged (Amend, No Verify)</source>
    </trans-unit>
    <trans-unit id="command.commitStagedNoVerify">
      <source xml:lang="en">Commit Staged (No Verify)</source>
    </trans-unit>
    <trans-unit id="command.commitStagedSigned">
      <source xml:lang="en">Commit Staged (Signed Off)</source>
    </trans-unit>
    <trans-unit id="command.commitStagedSignedNoVerify">
      <source xml:lang="en">Commit Staged (Signed Off, No Verify)</source>
    </trans-unit>
    <trans-unit id="command.createTag">
      <source xml:lang="en">Create Tag</source>
    </trans-unit>
    <trans-unit id="command.deleteBranch">
      <source xml:lang="en">Delete Branch...</source>
    </trans-unit>
    <trans-unit id="command.deleteTag">
      <source xml:lang="en">Delete Tag</source>
    </trans-unit>
    <trans-unit id="command.fetch">
      <source xml:lang="en">Fetch</source>
    </trans-unit>
    <trans-unit id="command.fetchAll">
      <source xml:lang="en">Fetch From All Remotes</source>
    </trans-unit>
    <trans-unit id="command.fetchPrune">
      <source xml:lang="en">Fetch (Prune)</source>
    </trans-unit>
    <trans-unit id="command.ignore">
      <source xml:lang="en">Add to .gitignore</source>
    </trans-unit>
    <trans-unit id="command.init">
      <source xml:lang="en">Initialize Repository</source>
    </trans-unit>
    <trans-unit id="command.merge">
      <source xml:lang="en">Merge Branch...</source>
    </trans-unit>
    <trans-unit id="command.openAllChanges">
      <source xml:lang="en">Open All Changes</source>
    </trans-unit>
    <trans-unit id="command.openChange">
      <source xml:lang="en">Open Changes</source>
    </trans-unit>
    <trans-unit id="command.openFile">
      <source xml:lang="en">Open File</source>
    </trans-unit>
    <trans-unit id="command.openHEADFile">
      <source xml:lang="en">Open File (HEAD)</source>
    </trans-unit>
    <trans-unit id="command.openRepository">
      <source xml:lang="en">Open Repository</source>
    </trans-unit>
    <trans-unit id="command.publish">
      <source xml:lang="en">Publish Branch...</source>
    </trans-unit>
    <trans-unit id="command.pull">
      <source xml:lang="en">Pull</source>
    </trans-unit>
    <trans-unit id="command.pullFrom">
      <source xml:lang="en">Pull from...</source>
    </trans-unit>
    <trans-unit id="command.pullRebase">
      <source xml:lang="en">Pull (Rebase)</source>
    </trans-unit>
    <trans-unit id="command.push">
      <source xml:lang="en">Push</source>
    </trans-unit>
    <trans-unit id="command.pushFollowTags">
      <source xml:lang="en">Push (Follow Tags)</source>
    </trans-unit>
    <trans-unit id="command.pushFollowTagsForce">
      <source xml:lang="en">Push (Follow Tags, Force)</source>
    </trans-unit>
    <trans-unit id="command.pushForce">
      <source xml:lang="en">Push (Force)</source>
    </trans-unit>
    <trans-unit id="command.pushTags">
      <source xml:lang="en">Push Tags</source>
    </trans-unit>
    <trans-unit id="command.pushTo">
      <source xml:lang="en">Push to...</source>
    </trans-unit>
    <trans-unit id="command.pushToForce">
      <source xml:lang="en">Push to... (Force)</source>
    </trans-unit>
    <trans-unit id="command.rebase">
      <source xml:lang="en">Rebase Branch...</source>
    </trans-unit>
    <trans-unit id="command.rebaseAbort">
      <source xml:lang="en">Abort Rebase</source>
    </trans-unit>
    <trans-unit id="command.refresh">
      <source xml:lang="en">Refresh</source>
    </trans-unit>
    <trans-unit id="command.removeRemote">
      <source xml:lang="en">Remove Remote</source>
    </trans-unit>
    <trans-unit id="command.rename">
      <source xml:lang="en">Rename</source>
    </trans-unit>
    <trans-unit id="command.renameBranch">
      <source xml:lang="en">Rename Branch...</source>
    </trans-unit>
    <trans-unit id="command.restoreCommitTemplate">
      <source xml:lang="en">Restore Commit Template</source>
    </trans-unit>
    <trans-unit id="command.revealInExplorer">
      <source xml:lang="en">Reveal in Explorer View</source>
    </trans-unit>
    <trans-unit id="command.revertChange">
      <source xml:lang="en">Revert Change</source>
    </trans-unit>
    <trans-unit id="command.revertSelectedRanges">
      <source xml:lang="en">Revert Selected Ranges</source>
    </trans-unit>
    <trans-unit id="command.setLogLevel">
      <source xml:lang="en">Set Log Level...</source>
    </trans-unit>
    <trans-unit id="command.showOutput">
      <source xml:lang="en">Show Git Output</source>
    </trans-unit>
    <trans-unit id="command.stage">
      <source xml:lang="en">Stage Changes</source>
    </trans-unit>
    <trans-unit id="command.stageAll">
      <source xml:lang="en">Stage All Changes</source>
    </trans-unit>
    <trans-unit id="command.stageAllMerge">
      <source xml:lang="en">Stage All Merge Changes</source>
    </trans-unit>
    <trans-unit id="command.stageAllTracked">
      <source xml:lang="en">Stage All Tracked Changes</source>
    </trans-unit>
    <trans-unit id="command.stageAllUntracked">
      <source xml:lang="en">Stage All Untracked Changes</source>
    </trans-unit>
    <trans-unit id="command.stageChange">
      <source xml:lang="en">Stage Change</source>
    </trans-unit>
    <trans-unit id="command.stageSelectedRanges">
      <source xml:lang="en">Stage Selected Ranges</source>
    </trans-unit>
    <trans-unit id="command.stash">
      <source xml:lang="en">Stash</source>
    </trans-unit>
    <trans-unit id="command.stashApply">
      <source xml:lang="en">Apply Stash...</source>
    </trans-unit>
    <trans-unit id="command.stashApplyLatest">
      <source xml:lang="en">Apply Latest Stash</source>
    </trans-unit>
    <trans-unit id="command.stashDrop">
      <source xml:lang="en">Drop Stash...</source>
    </trans-unit>
    <trans-unit id="command.stashDropAll">
      <source xml:lang="en">Drop All Stashes...</source>
    </trans-unit>
    <trans-unit id="command.stashIncludeUntracked">
      <source xml:lang="en">Stash (Include Untracked)</source>
    </trans-unit>
    <trans-unit id="command.stashPop">
      <source xml:lang="en">Pop Stash...</source>
    </trans-unit>
    <trans-unit id="command.stashPopLatest">
      <source xml:lang="en">Pop Latest Stash</source>
    </trans-unit>
    <trans-unit id="command.sync">
      <source xml:lang="en">Sync</source>
    </trans-unit>
    <trans-unit id="command.syncRebase">
      <source xml:lang="en">Sync (Rebase)</source>
    </trans-unit>
    <trans-unit id="command.timelineCompareWithSelected">
      <source xml:lang="en">Compare with Selected</source>
    </trans-unit>
    <trans-unit id="command.timelineCopyCommitId">
      <source xml:lang="en">Copy Commit ID</source>
    </trans-unit>
    <trans-unit id="command.timelineCopyCommitMessage">
      <source xml:lang="en">Copy Commit Message</source>
    </trans-unit>
    <trans-unit id="command.timelineOpenDiff">
      <source xml:lang="en">Open Changes</source>
    </trans-unit>
    <trans-unit id="command.timelineSelectForCompare">
      <source xml:lang="en">Select for Compare</source>
    </trans-unit>
    <trans-unit id="command.undoCommit">
      <source xml:lang="en">Undo Last Commit</source>
    </trans-unit>
    <trans-unit id="command.unstage">
      <source xml:lang="en">Unstage Changes</source>
    </trans-unit>
    <trans-unit id="command.unstageAll">
      <source xml:lang="en">Unstage All Changes</source>
    </trans-unit>
    <trans-unit id="command.unstageSelectedRanges">
      <source xml:lang="en">Unstage Selected Ranges</source>
    </trans-unit>
    <trans-unit id="config.allowForcePush">
      <source xml:lang="en">Controls whether force push (with or without lease) is enabled.</source>
    </trans-unit>
    <trans-unit id="config.allowNoVerifyCommit">
      <source xml:lang="en">Controls whether commits without running pre-commit and commit-msg hooks are allowed.</source>
    </trans-unit>
    <trans-unit id="config.alwaysShowStagedChangesResourceGroup">
      <source xml:lang="en">Always show the Staged Changes resource group.</source>
    </trans-unit>
    <trans-unit id="config.alwaysSignOff">
      <source xml:lang="en">Controls the signoff flag for all commits.</source>
    </trans-unit>
    <trans-unit id="config.autoRepositoryDetection">
      <source xml:lang="en">Configures when repositories should be automatically detected.</source>
    </trans-unit>
    <trans-unit id="config.autoRepositoryDetection.false">
      <source xml:lang="en">Disable automatic repository scanning.</source>
    </trans-unit>
    <trans-unit id="config.autoRepositoryDetection.openEditors">
      <source xml:lang="en">Scan for parent folders of open files.</source>
    </trans-unit>
    <trans-unit id="config.autoRepositoryDetection.subFolders">
      <source xml:lang="en">Scan for subfolders of the currently opened folder.</source>
    </trans-unit>
    <trans-unit id="config.autoRepositoryDetection.true">
      <source xml:lang="en">Scan for both subfolders of the current opened folder and parent folders of open files.</source>
    </trans-unit>
    <trans-unit id="config.autoStash">
      <source xml:lang="en">Stash any changes before pulling and restore them after successful pull.</source>
    </trans-unit>
    <trans-unit id="config.autofetch">
      <source xml:lang="en">When set to true, commits will automatically be fetched from the default remote of the current Git repository. Setting to `all` will fetch from all remotes.</source>
    </trans-unit>
    <trans-unit id="config.autofetchPeriod">
      <source xml:lang="en">Duration in seconds between each automatic git fetch, when `#git.autofetch#` is enabled.</source>
    </trans-unit>
    <trans-unit id="config.autorefresh">
      <source xml:lang="en">Whether auto refreshing is enabled.</source>
    </trans-unit>
    <trans-unit id="config.branchSortOrder">
      <source xml:lang="en">Controls the sort order for branches.</source>
    </trans-unit>
    <trans-unit id="config.branchValidationRegex">
      <source xml:lang="en">A regular expression to validate new branch names.</source>
    </trans-unit>
    <trans-unit id="config.branchWhitespaceChar">
      <source xml:lang="en">The character to replace whitespace in new branch names.</source>
    </trans-unit>
    <trans-unit id="config.checkoutType">
      <source xml:lang="en">Controls what type of git refs are listed when running `Checkout to...`.</source>
    </trans-unit>
    <trans-unit id="config.checkoutType.local">
      <source xml:lang="en">Local branches</source>
    </trans-unit>
    <trans-unit id="config.checkoutType.remote">
      <source xml:lang="en">Remote branches</source>
    </trans-unit>
    <trans-unit id="config.checkoutType.tags">
      <source xml:lang="en">Tags</source>
    </trans-unit>
    <trans-unit id="config.closeDiffOnOperation">
      <source xml:lang="en">Controls whether the diff editor should be automatically closed when changes are stashed, committed, discarded, staged, or unstaged.</source>
    </trans-unit>
    <trans-unit id="config.commandsToLog">
      <source xml:lang="en">List of git commands (ex: commit, push) that would have their `stdout` logged to the [git output](command:git.showOutput). If the git command has a client-side hook configured, the client-side hook's `stdout` will also be logged to the [git output](command:git.showOutput).</source>
    </trans-unit>
    <trans-unit id="config.confirmEmptyCommits">
      <source xml:lang="en">Always confirm the creation of empty commits for the 'Git: Commit Empty' command.</source>
    </trans-unit>
    <trans-unit id="config.confirmForcePush">
      <source xml:lang="en">Controls whether to ask for confirmation before force-pushing.</source>
    </trans-unit>
    <trans-unit id="config.confirmNoVerifyCommit">
      <source xml:lang="en">Controls whether to ask for confirmation before committing without verification.</source>
    </trans-unit>
    <trans-unit id="config.confirmSync">
      <source xml:lang="en">Confirm before synchronizing git repositories.</source>
    </trans-unit>
    <trans-unit id="config.countBadge">
      <source xml:lang="en">Controls the Git count badge.</source>
    </trans-unit>
    <trans-unit id="config.countBadge.all">
      <source xml:lang="en">Count all changes.</source>
    </trans-unit>
    <trans-unit id="config.countBadge.off">
      <source xml:lang="en">Turn off counter.</source>
    </trans-unit>
    <trans-unit id="config.countBadge.tracked">
      <source xml:lang="en">Count only tracked changes.</source>
    </trans-unit>
    <trans-unit id="config.decorations.enabled">
      <source xml:lang="en">Controls whether Git contributes colors and badges to the Explorer and the Open Editors view.</source>
    </trans-unit>
    <trans-unit id="config.defaultCloneDirectory">
      <source xml:lang="en">The default location to clone a git repository.</source>
    </trans-unit>
    <trans-unit id="config.detectSubmodules">
      <source xml:lang="en">Controls whether to automatically detect git submodules.</source>
    </trans-unit>
    <trans-unit id="config.detectSubmodulesLimit">
      <source xml:lang="en">Controls the limit of git submodules detected.</source>
    </trans-unit>
    <trans-unit id="config.discardAllScope">
      <source xml:lang="en">Controls what changes are discarded by the `Discard all changes` command. `all` discards all changes. `tracked` discards only tracked files. `prompt` shows a prompt dialog every time the action is run.</source>
    </trans-unit>
    <trans-unit id="config.enableCommitSigning">
      <source xml:lang="en">Enables commit signing with GPG or X.509.</source>
    </trans-unit>
    <trans-unit id="config.enableSmartCommit">
      <source xml:lang="en">Commit all changes when there are no staged changes.</source>
    </trans-unit>
    <trans-unit id="config.enableStatusBarSync">
      <source xml:lang="en">Controls whether the Git Sync command appears in the status bar.</source>
    </trans-unit>
    <trans-unit id="config.enabled">
      <source xml:lang="en">Whether git is enabled.</source>
    </trans-unit>
    <trans-unit id="config.experimental.installGuide">
      <source xml:lang="en">Experimental improvements for the git setup flow.</source>
    </trans-unit>
    <trans-unit id="config.fetchOnPull">
      <source xml:lang="en">When enabled, fetch all branches when pulling. Otherwise, fetch just the current one.</source>
    </trans-unit>
    <trans-unit id="config.followTagsWhenSync">
      <source xml:lang="en">Follow push all tags when running the sync command.</source>
    </trans-unit>
    <trans-unit id="config.ignoreLegacyWarning">
      <source xml:lang="en">Ignores the legacy Git warning.</source>
    </trans-unit>
    <trans-unit id="config.ignoreLimitWarning">
      <source xml:lang="en">Ignores the warning when there are too many changes in a repository.</source>
    </trans-unit>
    <trans-unit id="config.ignoreMissingGitWarning">
      <source xml:lang="en">Ignores the warning when Git is missing.</source>
    </trans-unit>
    <trans-unit id="config.ignoreRebaseWarning">
      <source xml:lang="en">Ignores the warning when it looks like the branch might have been rebased when pulling.</source>
    </trans-unit>
    <trans-unit id="config.ignoreSubmodules">
      <source xml:lang="en">Ignore modifications to submodules in the file tree.</source>
    </trans-unit>
    <trans-unit id="config.ignoreWindowsGit27Warning">
      <source xml:lang="en">Ignores the warning when Git 2.25 - 2.26 is installed on Windows.</source>
    </trans-unit>
    <trans-unit id="config.ignoredRepositories">
      <source xml:lang="en">List of git repositories to ignore.</source>
    </trans-unit>
    <trans-unit id="config.inputValidation">
      <source xml:lang="en">Controls when to show commit message input validation.</source>
    </trans-unit>
    <trans-unit id="config.inputValidationLength">
      <source xml:lang="en">Controls the commit message length threshold for showing a warning.</source>
    </trans-unit>
    <trans-unit id="config.inputValidationSubjectLength">
      <source xml:lang="en">Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.</source>
    </trans-unit>
    <trans-unit id="config.openAfterClone">
      <source xml:lang="en">Controls whether to open a repository automatically after cloning.</source>
    </trans-unit>
    <trans-unit id="config.openAfterClone.always">
      <source xml:lang="en">Always open in current window.</source>
    </trans-unit>
    <trans-unit id="config.openAfterClone.alwaysNewWindow">
      <source xml:lang="en">Always open in a new window.</source>
    </trans-unit>
    <trans-unit id="config.openAfterClone.prompt">
      <source xml:lang="en">Always prompt for action.</source>
    </trans-unit>
    <trans-unit id="config.openAfterClone.whenNoFolderOpen">
      <source xml:lang="en">Only open in current window when no folder is opened.</source>
    </trans-unit>
    <trans-unit id="config.openDiffOnClick">
      <source xml:lang="en">Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.</source>
    </trans-unit>
    <trans-unit id="config.path">
      <source xml:lang="en">Path and filename of the git executable, e.g. `C:\Program Files\Git\bin\git.exe` (Windows). This can also be an array of string values containing multiple paths to look up.</source>
    </trans-unit>
    <trans-unit id="config.postCommitCommand">
      <source xml:lang="en">Runs a git command after a successful commit.</source>
    </trans-unit>
    <trans-unit id="config.postCommitCommand.none">
      <source xml:lang="en">Don't run any command after a commit.</source>
    </trans-unit>
    <trans-unit id="config.postCommitCommand.push">
      <source xml:lang="en">Run 'Git Push' after a successful commit.</source>
    </trans-unit>
    <trans-unit id="config.postCommitCommand.sync">
      <source xml:lang="en">Run 'Git Sync' after a successful commit.</source>
    </trans-unit>
    <trans-unit id="config.promptToSaveFilesBeforeCommit">
      <source xml:lang="en">Controls whether Git should check for unsaved files before committing.</source>
    </trans-unit>
    <trans-unit id="config.promptToSaveFilesBeforeCommit.always">
      <source xml:lang="en">Check for any unsaved files.</source>
    </trans-unit>
    <trans-unit id="config.promptToSaveFilesBeforeCommit.never">
      <source xml:lang="en">Disable this check.</source>
    </trans-unit>
    <trans-unit id="config.promptToSaveFilesBeforeCommit.staged">
      <source xml:lang="en">Check only for unsaved staged files.</source>
    </trans-unit>
    <trans-unit id="config.promptToSaveFilesBeforeStash">
      <source xml:lang="en">Controls whether Git should check for unsaved files before stashing changes.</source>
    </trans-unit>
    <trans-unit id="config.promptToSaveFilesBeforeStash.always">
      <source xml:lang="en">Check for any unsaved files.</source>
    </trans-unit>
    <trans-unit id="config.promptToSaveFilesBeforeStash.never">
      <source xml:lang="en">Disable this check.</source>
    </trans-unit>
    <trans-unit id="config.promptToSaveFilesBeforeStash.staged">
      <source xml:lang="en">Check only for unsaved staged files.</source>
    </trans-unit>
    <trans-unit id="config.pruneOnFetch">
      <source xml:lang="en">Prune when fetching.</source>
    </trans-unit>
    <trans-unit id="config.pullTags">
      <source xml:lang="en">Fetch all tags when pulling.</source>
    </trans-unit>
    <trans-unit id="config.rebaseWhenSync">
      <source xml:lang="en">Force git to use rebase when running the sync command.</source>
    </trans-unit>
    <trans-unit id="config.repositoryScanIgnoredFolders">
      <source xml:lang="en">List of folders that are ignored while scanning for Git repositories when `#git.autoRepositoryDetection#` is set to `true` or `subFolders`.</source>
    </trans-unit>
    <trans-unit id="config.repositoryScanMaxDepth">
      <source xml:lang="en">Controls the depth used when scanning workspace folders for Git repositories when `#git.autoRepositoryDetection#` is set to `true` or `subFolders`. Can be set to `-1` for no limit.</source>
    </trans-unit>
    <trans-unit id="config.requireGitUserConfig">
      <source xml:lang="en">Controls whether to require explicit Git user configuration or allow Git to guess if missing.</source>
    </trans-unit>
    <trans-unit id="config.scanRepositories">
      <source xml:lang="en">List of paths to search for git repositories in.</source>
    </trans-unit>
    <trans-unit id="config.showCommitInput">
      <source xml:lang="en">Controls whether to show the commit input in the Git source control panel.</source>
    </trans-unit>
    <trans-unit id="config.showInlineOpenFileAction">
      <source xml:lang="en">Controls whether to show an inline Open File action in the Git changes view.</source>
    </trans-unit>
    <trans-unit id="config.showProgress">
      <source xml:lang="en">Controls whether git actions should show progress.</source>
    </trans-unit>
    <trans-unit id="config.showPushSuccessNotification">
      <source xml:lang="en">Controls whether to show a notification when a push is successful.</source>
    </trans-unit>
    <trans-unit id="config.showUnpublishedCommitsButton">
      <source xml:lang="en">Controls whether to show an action button to sync or publish, if there are unpublished commits.</source>
    </trans-unit>
    <trans-unit id="config.showUnpublishedCommitsButton.always">
      <source xml:lang="en">Always shows the action button, if there are unpublished commits.</source>
    </trans-unit>
    <trans-unit id="config.showUnpublishedCommitsButton.never">
      <source xml:lang="en">Never shows the action button.</source>
    </trans-unit>
    <trans-unit id="config.showUnpublishedCommitsButton.whenEmpty">
      <source xml:lang="en">Only shows the action button if there are no other changes and there are unpublished commits.</source>
    </trans-unit>
    <trans-unit id="config.smartCommitChanges">
      <source xml:lang="en">Control which changes are automatically staged by Smart Commit.</source>
    </trans-unit>
    <trans-unit id="config.smartCommitChanges.all">
      <source xml:lang="en">Automatically stage all changes.</source>
    </trans-unit>
    <trans-unit id="config.smartCommitChanges.tracked">
      <source xml:lang="en">Automatically stage tracked changes only.</source>
    </trans-unit>
    <trans-unit id="config.statusLimit">
      <source xml:lang="en">Controls how to limit the number of changes that can be parsed from Git status command. Can be set to 0 for no limit.</source>
    </trans-unit>
    <trans-unit id="config.suggestSmartCommit">
      <source xml:lang="en">Suggests to enable smart commit (commit all changes when there are no staged changes).</source>
    </trans-unit>
    <trans-unit id="config.supportCancellation">
      <source xml:lang="en">Controls whether a notification comes up when running the Sync action, which allows the user to cancel the operation.</source>
    </trans-unit>
    <trans-unit id="config.terminalAuthentication">
      <source xml:lang="en">Controls whether to enable Azure Data Studio to be the authentication handler for git processes spawned in the integrated terminal. Note: terminals need to be restarted to pick up a change in this setting.</source>
    </trans-unit>
    <trans-unit id="config.timeline.date">
      <source xml:lang="en">Controls which date to use for items in the Timeline view.</source>
    </trans-unit>
    <trans-unit id="config.timeline.date.authored">
      <source xml:lang="en">Use the authored date</source>
    </trans-unit>
    <trans-unit id="config.timeline.date.committed">
      <source xml:lang="en">Use the committed date</source>
    </trans-unit>
    <trans-unit id="config.timeline.showAuthor">
      <source xml:lang="en">Controls whether to show the commit author in the Timeline view.</source>
    </trans-unit>
    <trans-unit id="config.timeline.showUncommitted">
      <source xml:lang="en">Controls whether to show uncommitted changes in the Timeline view.</source>
    </trans-unit>
    <trans-unit id="config.untrackedChanges">
      <source xml:lang="en">Controls how untracked changes behave.</source>
    </trans-unit>
    <trans-unit id="config.untrackedChanges.hidden">
      <source xml:lang="en">Untracked changes are hidden and excluded from several actions.</source>
    </trans-unit>
    <trans-unit id="config.untrackedChanges.mixed">
      <source xml:lang="en">All changes, tracked and untracked, appear together and behave equally.</source>
    </trans-unit>
    <trans-unit id="config.untrackedChanges.separate">
      <source xml:lang="en">Untracked changes appear separately in the Source Control view. They are also excluded from several actions.</source>
    </trans-unit>
    <trans-unit id="config.useCommitInputAsStashMessage">
      <source xml:lang="en">Controls whether to use the message from the commit input box as the default stash message.</source>
    </trans-unit>
    <trans-unit id="config.useForcePushWithLease">
      <source xml:lang="en">Controls whether force pushing uses the safer force-with-lease variant.</source>
    </trans-unit>
    <trans-unit id="config.useIntegratedAskPass">
      <source xml:lang="en">Controls whether GIT_ASKPASS should be overwritten to use the integrated version.</source>
    </trans-unit>
    <trans-unit id="description">
      <source xml:lang="en">Git SCM Integration</source>
    </trans-unit>
    <trans-unit id="displayName">
      <source xml:lang="en">Git</source>
    </trans-unit>
    <trans-unit id="submenu.branch">
      <source xml:lang="en">Branch</source>
    </trans-unit>
    <trans-unit id="submenu.changes">
      <source xml:lang="en">Changes</source>
    </trans-unit>
    <trans-unit id="submenu.commit">
      <source xml:lang="en">Commit</source>
    </trans-unit>
    <trans-unit id="submenu.commit.amend">
      <source xml:lang="en">Amend</source>
    </trans-unit>
    <trans-unit id="submenu.commit.signoff">
      <source xml:lang="en">Sign Off</source>
    </trans-unit>
    <trans-unit id="submenu.explorer">
      <source xml:lang="en">Git</source>
    </trans-unit>
    <trans-unit id="submenu.pullpush">
      <source xml:lang="en">Pull, Push</source>
    </trans-unit>
    <trans-unit id="submenu.remotes">
      <source xml:lang="en">Remote</source>
    </trans-unit>
    <trans-unit id="submenu.stash">
      <source xml:lang="en">Stash</source>
    </trans-unit>
    <trans-unit id="submenu.tags">
      <source xml:lang="en">Tags</source>
    </trans-unit>
    <trans-unit id="view.workbench.cloneRepository">
      <source xml:lang="en">You can clone a repository locally.
[Clone Repository](command:git.clone 'Clone a repository once the git extension has activated')</source>
    </trans-unit>
    <trans-unit id="view.workbench.learnMore">
      <source xml:lang="en">To learn more about how to use git and source control in Azure Data Studio [read our docs](https://aka.ms/vscode-scm).</source>
    </trans-unit>
    <trans-unit id="view.workbench.scm.disabled">
      <source xml:lang="en">If you would like to use git features, please enable git in your [settings](command:workbench.action.openSettings?%5B%22git.enabled%22%5D).
To learn more about how to use git and source control in VS Code [read our docs](https://aka.ms/vscode-scm).</source>
    </trans-unit>
    <trans-unit id="view.workbench.scm.empty">
      <source xml:lang="en">In order to use git features, you can open a folder containing a git repository or clone from a URL.
[Open Folder](command:vscode.openFolder)
[Clone Repository](command:git.clone)
To learn more about how to use git and source control in Azure Data Studio [read our docs](https://aka.ms/vscode-scm).</source>
    </trans-unit>
    <trans-unit id="view.workbench.scm.emptyWorkspace">
      <source xml:lang="en">The workspace currently open doesn't have any folders containing git repositories.
[Add Folder to Workspace](command:workbench.action.addRootFolder)
To learn more about how to use git and source control in Azure Data Studio [read our docs](https://aka.ms/vscode-scm).</source>
    </trans-unit>
    <trans-unit id="view.workbench.scm.folder">
      <source xml:lang="en">The folder currently open doesn't have a git repository. You can initialize a repository which will enable source control features powered by git.
[Initialize Repository](command:git.init?%5Btrue%5D)
To learn more about how to use git and source control in Azure Data Studio [read our docs](https://aka.ms/vscode-scm).</source>
    </trans-unit>
    <trans-unit id="view.workbench.scm.missing">
      <source xml:lang="en">A valid git installation was not detected, more details can be found in the [git output](command:git.showOutput).
Please [install git](https://git-scm.com/), or learn more about how to use git and source control in Azure Data Studio in [our docs](https://aka.ms/vscode-scm).
If you're using a different version control system, you can [search the Marketplace](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22) for additional extensions.</source>
    </trans-unit>
    <trans-unit id="view.workbench.scm.missing.guide">
      <source xml:lang="en">Install Git, a popular source control system, to track code changes and collaborate with others. Learn more in our [Git guides](https://aka.ms/vscode-scm).</source>
    </trans-unit>
    <trans-unit id="view.workbench.scm.missing.guide.linux">
      <source xml:lang="en">Source control depends on Git being installed.
[Download Git for Linux](https://git-scm.com/download/linux)
After installing, please [reload](command:workbench.action.reloadWindow) (or [troubleshoot](command:git.showOutput)). Additional source control providers can be installed [from the Marketplace](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22).</source>
    </trans-unit>
    <trans-unit id="view.workbench.scm.missing.guide.mac">
      <source xml:lang="en">[Download Git for macOS](https://git-scm.com/download/mac)
After installing, please [reload](command:workbench.action.reloadWindow) (or [troubleshoot](command:git.showOutput)). Additional source control providers can be installed [from the Marketplace](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22).</source>
    </trans-unit>
    <trans-unit id="view.workbench.scm.missing.guide.windows">
      <source xml:lang="en">[Download Git for Windows](https://git-scm.com/download/win)
After installing, please [reload](command:workbench.action.reloadWindow) (or [troubleshoot](command:git.showOutput)). Additional source control providers can be installed [from the Marketplace](command:workbench.extensions.search?%22%40category%3A%5C%22scm%20providers%5C%22%22).</source>
    </trans-unit>
    <trans-unit id="view.workbench.scm.workspace">
      <source xml:lang="en">The workspace currently open doesn't have any folders containing git repositories. You can initialize a repository on a folder which will enable source control features powered by git.
[Initialize Repository](command:git.init)
To learn more about how to use git and source control in Azure Data Studio [read our docs](https://aka.ms/vscode-scm).</source>
    </trans-unit>
</body></file>
</xliff>