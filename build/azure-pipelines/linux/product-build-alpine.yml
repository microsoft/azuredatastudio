steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "14.x"

  - task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
    inputs:
      versionSpec: "1.x"

  - task: AzureKeyVault@1
    displayName: "Azure Key Vault: Get Secrets"
    inputs:
      azureSubscription: "vscode-builds-subscription"
      KeyVaultName: vscode
      SecretsFilter: 'github-distro-mixin-password'

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: Compilation
      path: $(Build.ArtifactStagingDirectory)
    displayName: Download compilation output

  - script: |
      set -e
      tar -xzf $(Build.ArtifactStagingDirectory)/compilation.tar.gz
    displayName: Extract compilation output

  - task: Docker@1
    displayName: "Pull image"
    inputs:
      azureSubscriptionEndpoint: "vscode-builds-subscription"
      azureContainerRegistry: vscodehub.azurecr.io
      command: "Run an image"
      imageName: "vscode-linux-build-agent:alpine-$(VSCODE_ARCH)"
      containerCommand: uname

  - script: |
      set -e
      cat << EOF > ~/.netrc
      machine github.com
      login vscode
      password $(github-distro-mixin-password)
      EOF

      git config user.email "vscode@microsoft.com"
      git config user.name "VSCode"
    displayName: Prepare tooling

  - script: |
      set -e
      git pull --no-rebase https://github.com/$(VSCODE_MIXIN_REPO).git $(node -p "require('./package.json').distro")
    displayName: Merge distro

  - script: |
      mkdir -p .build
      node build/azure-pipelines/common/computeNodeModulesCacheKey.js "alpine" $ENABLE_TERRAPIN > .build/yarnlockhash
    displayName: Prepare yarn cache flags

  - task: Cache@2
    inputs:
      key: 'nodeModules | $(Agent.OS) | .build/yarnlockhash'
      path: .build/node_modules_cache
      cacheHitVar: NODE_MODULES_RESTORED
    displayName: Restore node_modules cache

  - script: |
      set -e
      tar -xzf .build/node_modules_cache/cache.tgz
    condition: and(succeeded(), eq(variables.NODE_MODULES_RESTORED, 'true'))
    displayName: Extract node_modules cache

  - script: |
      set -e
      npx https://aka.ms/enablesecurefeed standAlone
    timeoutInMinutes: 5
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'), eq(variables['ENABLE_TERRAPIN'], 'true'))
    displayName: Switch to Terrapin packages

  - script: |
      set -e
      for i in {1..3}; do # try 3 times, for Terrapin
        yarn --frozen-lockfile && break
        if [ $i -eq 3 ]; then
          echo "Yarn failed too many times" >&2
          exit 1
        fi
        echo "Yarn failed $i, trying again..."
      done
    env:
      ELECTRON_SKIP_BINARY_DOWNLOAD: 1
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      GITHUB_TOKEN: "$(github-distro-mixin-password)"
    displayName: Install dependencies
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'))

  - script: |
      set -e
      node build/azure-pipelines/common/listNodeModules.js .build/node_modules_list.txt
      mkdir -p .build/node_modules_cache
      tar -czf .build/node_modules_cache/cache.tgz --files-from .build/node_modules_list.txt
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'))
    displayName: Create node_modules archive

  - script: |
      set -e
      node build/azure-pipelines/mixin
    displayName: Mix in quality

  - script: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    displayName: 'Register Docker QEMU'
    condition: eq(variables['VSCODE_ARCH'], 'arm64')

  - script: |
      set -e
      docker run -e VSCODE_QUALITY -v $(pwd):/root/vscode -v ~/.netrc:/root/.netrc vscodehub.azurecr.io/vscode-linux-build-agent:alpine-$(VSCODE_ARCH) /root/vscode/build/azure-pipelines/linux/alpine/install-dependencies.sh
    displayName: Prebuild

  - script: |
      set -e

      case $VSCODE_ARCH in
        x64)
          reh='vscode-reh-linux-alpine-min-ci'
          rehweb='vscode-reh-web-linux-alpine-min-ci'
          ;;
        arm64)
          reh='vscode-reh-alpine-arm64-min-ci'
          rehweb='vscode-reh-web-alpine-arm64-min-ci'
          ;;
      esac

      yarn gulp $reh
      yarn gulp $rehweb
    displayName: Build

  - script: |
      set -e
      REPO="$(pwd)"
      ROOT="$REPO/.."

      case $VSCODE_ARCH in
        x64)
          PLATFORM_LINUX='linux-alpine'
          ;;
        arm64)
          PLATFORM_LINUX='alpine-arm64'
          ;;
      esac

      # Publish Remote Extension Host
      LEGACY_SERVER_BUILD_NAME="vscode-reh-$PLATFORM_LINUX"
      SERVER_BUILD_NAME="vscode-server-$PLATFORM_LINUX"
      SERVER_TARBALL_FILENAME="vscode-server-$PLATFORM_LINUX.tar.gz"
      SERVER_TARBALL_PATH="$ROOT/$SERVER_TARBALL_FILENAME"

      rm -rf $ROOT/vscode-server-*.tar.*
      (cd $ROOT && mv $LEGACY_SERVER_BUILD_NAME $SERVER_BUILD_NAME && tar --owner=0 --group=0 -czf $SERVER_TARBALL_PATH $SERVER_BUILD_NAME)

      # Publish Remote Extension Host (Web)
      LEGACY_SERVER_BUILD_NAME="vscode-reh-web-$PLATFORM_LINUX"
      SERVER_BUILD_NAME="vscode-server-$PLATFORM_LINUX-web"
      SERVER_TARBALL_FILENAME="vscode-server-$PLATFORM_LINUX-web.tar.gz"
      SERVER_TARBALL_PATH="$ROOT/$SERVER_TARBALL_FILENAME"

      rm -rf $ROOT/vscode-server-*-web.tar.*
      (cd $ROOT && mv $LEGACY_SERVER_BUILD_NAME $SERVER_BUILD_NAME && tar --owner=0 --group=0 -czf $SERVER_TARBALL_PATH $SERVER_BUILD_NAME)
    displayName: Prepare for publish
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - publish: $(Agent.BuildDirectory)/vscode-server-alpine-$(VSCODE_ARCH).tar.gz
    artifact: vscode_server_alpine_$(VSCODE_ARCH)_archive-unsigned
    displayName: Publish server archive
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'), ne(variables['VSCODE_ARCH'], 'x64'))

  - publish: $(Agent.BuildDirectory)/vscode-server-alpine-$(VSCODE_ARCH)-web.tar.gz
    artifact: vscode_web_alpine_$(VSCODE_ARCH)_archive-unsigned
    displayName: Publish web server archive
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'), ne(variables['VSCODE_ARCH'], 'x64'))

  # Legacy x64 artifact name
  - publish: $(Agent.BuildDirectory)/vscode-server-linux-alpine.tar.gz
    artifact: vscode_server_linux_alpine_archive-unsigned
    displayName: Publish x64 server archive
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'), eq(variables['VSCODE_ARCH'], 'x64'))

  - publish: $(Agent.BuildDirectory)/vscode-server-linux-alpine-web.tar.gz
    artifact: vscode_web_linux_alpine_archive-unsigned
    displayName: Publish x64 web server archive
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'), eq(variables['VSCODE_ARCH'], 'x64'))
