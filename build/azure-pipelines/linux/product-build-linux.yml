steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "14.x"

  - task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
    inputs:
      versionSpec: "1.x"

  - task: AzureKeyVault@1
    displayName: "Azure Key Vault: Get Secrets"
    inputs:
      azureSubscription: "vscode-builds-subscription"
      KeyVaultName: vscode
      SecretsFilter: "github-distro-mixin-password,builds-docdb-key-readwrite,vscode-storage-key,ESRP-PKI,esrp-aad-username,esrp-aad-password"

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: Compilation
      path: $(Build.ArtifactStagingDirectory)
    displayName: Download compilation output

  - script: |
      set -e
      tar -xzf $(Build.ArtifactStagingDirectory)/compilation.tar.gz
    displayName: Extract compilation output

  - script: |
      set -e
      cat << EOF > ~/.netrc
      machine github.com
      login vscode
      password $(github-distro-mixin-password)
      EOF

      git config user.email "vscode@microsoft.com"
      git config user.name "VSCode"
    displayName: Prepare tooling

  - script: |
      set -e
      git pull --no-rebase https://github.com/$(VSCODE_MIXIN_REPO).git $(node -p "require('./package.json').distro")
    displayName: Merge distro

  - script: |
      mkdir -p .build
      node build/azure-pipelines/common/computeNodeModulesCacheKey.js $VSCODE_ARCH $ENABLE_TERRAPIN > .build/yarnlockhash
    displayName: Prepare yarn cache flags

  - task: Cache@2
    inputs:
      key: "nodeModules | $(Agent.OS) | .build/yarnlockhash"
      path: .build/node_modules_cache
      cacheHitVar: NODE_MODULES_RESTORED
    displayName: Restore node_modules cache

  - script: |
      set -e
      tar -xzf .build/node_modules_cache/cache.tgz
    condition: and(succeeded(), eq(variables.NODE_MODULES_RESTORED, 'true'))
    displayName: Extract node_modules cache

  - script: |
      set -e
      npx https://aka.ms/enablesecurefeed standAlone
    timeoutInMinutes: 5
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'), eq(variables['ENABLE_TERRAPIN'], 'true'))
    displayName: Switch to Terrapin packages

  - script: |
      set -e
      yarn --cwd build
      yarn --cwd build compile
    displayName: Compile build tools

  - script: |
      set -e
      export npm_config_arch=$(NPM_ARCH)

      if [ -z "$CC" ] || [ -z "$CXX" ]; then
        # Download clang based on chromium revision used by vscode
        curl -s https://raw.githubusercontent.com/chromium/chromium/91.0.4472.164/tools/clang/scripts/update.py | python - --output-dir=$PWD/.build/CR_Clang --host-os=linux
        # Download libcxx headers and objects from upstream electron releases
        DEBUG=libcxx-fetcher \
        VSCODE_LIBCXX_OBJECTS_DIR=$PWD/.build/libcxx-objects \
        VSCODE_LIBCXX_HEADERS_DIR=$PWD/.build/libcxx_headers  \
        VSCODE_LIBCXXABI_HEADERS_DIR=$PWD/.build/libcxxabi_headers \
        VSCODE_ARCH="$(NPM_ARCH)" \
        node build/linux/libcxx-fetcher.js
        # Set compiler toolchain
        export CC=$PWD/.build/CR_Clang/bin/clang
        export CXX=$PWD/.build/CR_Clang/bin/clang++
        export CXXFLAGS="-nostdinc++ -D_LIBCPP_HAS_NO_VENDOR_AVAILABILITY_ANNOTATIONS -D__NO_INLINE__ -isystem$PWD/.build/libcxx_headers/include -isystem$PWD/.build/libcxxabi_headers/include -fPIC -flto=thin -fsplit-lto-unit"
        export LDFLAGS="-stdlib=libc++ -fuse-ld=lld -flto=thin -fsplit-lto-unit -L$PWD/.build/libcxx-objects -lc++abi"
      fi

      if [ "$VSCODE_ARCH" == "x64" ]; then
        export VSCODE_REMOTE_CC=$(which gcc-4.8)
        export VSCODE_REMOTE_CXX=$(which g++-4.8)
      fi

      for i in {1..3}; do # try 3 times, for Terrapin
        yarn --frozen-lockfile && break
        if [ $i -eq 3 ]; then
          echo "Yarn failed too many times" >&2
          exit 1
        fi
        echo "Yarn failed $i, trying again..."
      done
    env:
      ELECTRON_SKIP_BINARY_DOWNLOAD: 1
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      GITHUB_TOKEN: "$(github-distro-mixin-password)"
    displayName: Install dependencies
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'))

  - script: |
      set -e
      node build/azure-pipelines/common/listNodeModules.js .build/node_modules_list.txt
      mkdir -p .build/node_modules_cache
      tar -czf .build/node_modules_cache/cache.tgz --files-from .build/node_modules_list.txt
    condition: and(succeeded(), ne(variables.NODE_MODULES_RESTORED, 'true'))
    displayName: Create node_modules archive

  - script: |
      set -e
      node build/azure-pipelines/mixin
    displayName: Mix in quality

  - script: |
      set -e
      VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
        yarn gulp vscode-linux-$(VSCODE_ARCH)-min-ci
    displayName: Build

  - script: |
      set -e
      VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
        yarn gulp vscode-reh-linux-$(VSCODE_ARCH)-min-ci
      VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
        yarn gulp vscode-reh-web-linux-$(VSCODE_ARCH)-min-ci
    displayName: Build Server

  - script: |
      set -e
      VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
        yarn npm-run-all -lp "electron $(VSCODE_ARCH)" "playwright-install"
    displayName: Download Electron and Playwright

  - script: |
      set -e
      APP_ROOT=$(agent.builddirectory)/VSCode-linux-$(VSCODE_ARCH)
      ELECTRON_ROOT=.build/electron
      sudo chown root $APP_ROOT/chrome-sandbox
      sudo chown root $ELECTRON_ROOT/chrome-sandbox
      sudo chmod 4755 $APP_ROOT/chrome-sandbox
      sudo chmod 4755 $ELECTRON_ROOT/chrome-sandbox
      stat $APP_ROOT/chrome-sandbox
      stat $ELECTRON_ROOT/chrome-sandbox
    displayName: Change setuid helper binary permission

  - script: |
      set -e
      ./scripts/test.sh --build --tfs "Unit Tests"
    displayName: Run unit tests (Electron)
    timeoutInMinutes: 7
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - script: |
      set -e
      yarn test-browser --build --browser chromium --tfs "Browser Unit Tests"
    displayName: Run unit tests (Browser)
    timeoutInMinutes: 7
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - script: |
      # Figure out the full absolute path of the product we just built
      # including the remote server and configure the integration tests
      # to run with these builds instead of running out of sources.
      set -e
      APP_ROOT=$(agent.builddirectory)/VSCode-linux-$(VSCODE_ARCH)
      APP_NAME=$(node -p "require(\"$APP_ROOT/resources/app/product.json\").applicationName")
      INTEGRATION_TEST_APP_NAME="$APP_NAME" \
      INTEGRATION_TEST_ELECTRON_PATH="$APP_ROOT/$APP_NAME" \
      VSCODE_REMOTE_SERVER_PATH="$(agent.builddirectory)/vscode-reh-linux-$(VSCODE_ARCH)" \
      ./scripts/test-integration.sh --build --tfs "Integration Tests"
    displayName: Run integration tests (Electron)
    timeoutInMinutes: 10
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - script: |
      set -e
      VSCODE_REMOTE_SERVER_PATH="$(agent.builddirectory)/vscode-reh-web-linux-$(VSCODE_ARCH)" \
      ./resources/server/test/test-web-integration.sh --browser chromium
    displayName: Run integration tests (Browser)
    timeoutInMinutes: 10
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - script: |
      set -e
      APP_ROOT=$(agent.builddirectory)/VSCode-linux-$(VSCODE_ARCH)
      APP_NAME=$(node -p "require(\"$APP_ROOT/resources/app/product.json\").applicationName")
      INTEGRATION_TEST_APP_NAME="$APP_NAME" \
      INTEGRATION_TEST_ELECTRON_PATH="$APP_ROOT/$APP_NAME" \
      VSCODE_REMOTE_SERVER_PATH="$(agent.builddirectory)/vscode-reh-linux-$(VSCODE_ARCH)" \
      ./resources/server/test/test-remote-integration.sh
    displayName: Run remote integration tests (Electron)
    timeoutInMinutes: 7
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - script: |
      set -e
      APP_PATH=$(agent.builddirectory)/VSCode-linux-$(VSCODE_ARCH)
      yarn smoketest-no-compile --build "$APP_PATH" --electronArgs="--disable-dev-shm-usage --use-gl=swiftshader" --screenshots $(Build.SourcesDirectory)/.build/logs/smoke-tests
    timeoutInMinutes: 5
    displayName: Run smoke tests (Electron)
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - script: |
      set -e
      APP_PATH=$(agent.builddirectory)/VSCode-linux-$(VSCODE_ARCH)
      VSCODE_REMOTE_SERVER_PATH="$(agent.builddirectory)/vscode-reh-linux-$(VSCODE_ARCH)" \
      yarn smoketest-no-compile --build "$APP_PATH" --remote --electronArgs="--disable-dev-shm-usage --use-gl=swiftshader" --screenshots $(Build.SourcesDirectory)/.build/logs/smoke-tests
    timeoutInMinutes: 5
    displayName: Run smoke tests (Remote)
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - script: |
      set -e
      VSCODE_REMOTE_SERVER_PATH="$(agent.builddirectory)/vscode-reh-web-linux-$(VSCODE_ARCH)" \
      yarn smoketest-no-compile --web --headless --electronArgs="--disable-dev-shm-usage --use-gl=swiftshader"
    timeoutInMinutes: 5
    displayName: Run smoke tests (Browser)
    condition: and(succeeded(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: crash-dump-linux-$(VSCODE_ARCH)
      targetPath: .build/crashes
    displayName: "Publish Crash Reports"
    continueOnError: true
    condition: failed()

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: logs-linux-$(VSCODE_ARCH)-$(System.JobAttempt)
      targetPath: .build/logs
    displayName: "Publish Log Files"
    continueOnError: true
    condition: and(succeededOrFailed(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - task: PublishTestResults@2
    displayName: Publish Tests Results
    inputs:
      testResultsFiles: "*-results.xml"
      searchFolder: "$(Build.ArtifactStagingDirectory)/test-results"
    condition: and(succeededOrFailed(), eq(variables['VSCODE_ARCH'], 'x64'), eq(variables['VSCODE_STEP_ON_IT'], 'false'))

  - script: |
      set -e
      yarn gulp "vscode-linux-$(VSCODE_ARCH)-build-deb"
      yarn gulp "vscode-linux-$(VSCODE_ARCH)-build-rpm"
    displayName: Build deb, rpm packages
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - script: |
      set -e
      yarn gulp "vscode-linux-$(VSCODE_ARCH)-prepare-snap"
    displayName: Prepare snap package
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - task: UseDotNet@2
    inputs:
      version: 2.x
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - task: EsrpClientTool@1
    displayName: Download ESRPClient
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - script: |
      set -e
      yarn --cwd build
      yarn --cwd build compile
    displayName: Compile build tools
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - script: |
      set -e
      node build/azure-pipelines/common/sign "$(esrpclient.toolpath)/$(esrpclient.toolname)" rpm $(ESRP-PKI) $(esrp-aad-username) $(esrp-aad-password) .build/linux/rpm '*.rpm'
    displayName: Codesign rpm
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - script: |
      set -e
      AZURE_DOCUMENTDB_MASTERKEY="$(builds-docdb-key-readwrite)" \
      AZURE_STORAGE_ACCESS_KEY_2="$(vscode-storage-key)" \
      VSCODE_MIXIN_PASSWORD="$(github-distro-mixin-password)" \
      VSCODE_ARCH="$(VSCODE_ARCH)" \
      ./build/azure-pipelines/linux/prepare-publish.sh
    displayName: Prepare for Publish
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - publish: $(DEB_PATH)
    artifact: vscode_client_linux_$(VSCODE_ARCH)_deb-package
    displayName: Publish deb package
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - publish: $(RPM_PATH)
    artifact: vscode_client_linux_$(VSCODE_ARCH)_rpm-package
    displayName: Publish rpm package
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - publish: $(TARBALL_PATH)
    artifact: vscode_client_linux_$(VSCODE_ARCH)_archive-unsigned
    displayName: Publish client archive
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - publish: $(Agent.BuildDirectory)/vscode-server-linux-$(VSCODE_ARCH).tar.gz
    artifact: vscode_server_linux_$(VSCODE_ARCH)_archive-unsigned
    displayName: Publish server archive
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - publish: $(Agent.BuildDirectory)/vscode-server-linux-$(VSCODE_ARCH)-web.tar.gz
    artifact: vscode_web_linux_$(VSCODE_ARCH)_archive-unsigned
    displayName: Publish web server archive
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))

  - task: PublishPipelineArtifact@0
    displayName: "Publish Pipeline Artifact"
    inputs:
      artifactName: "snap-$(VSCODE_ARCH)"
      targetPath: .build/linux/snap-tarball
    condition: and(succeeded(), ne(variables['VSCODE_PUBLISH'], 'false'))
