pr: none

schedules:
  - cron: "0 5 * * Mon-Fri"
    displayName: Mon-Fri at 7:00
    branches:
      include:
        - main

trigger:
  branches:
    include: ["main", "release/*"]

parameters:
  - name: VSCODE_QUALITY
    displayName: Quality
    type: string
    default: insider
    values:
      - exploration
      - insider
      - stable
  - name: NPM_REGISTRY
    displayName: "Custom NPM Registry"
    type: string
    default: 'https://pkgs.dev.azure.com/monacotools/Monaco/_packaging/vscode/npm/registry/'
  - name: VSCODE_BUILD_WIN32
    displayName: "ðŸŽ¯ Windows x64"
    type: boolean
    default: true
  - name: VSCODE_BUILD_WIN32_32BIT
    displayName: "ðŸŽ¯ Windows ia32"
    type: boolean
    default: true
  - name: VSCODE_BUILD_WIN32_ARM64
    displayName: "ðŸŽ¯ Windows arm64"
    type: boolean
    default: true
  - name: VSCODE_BUILD_LINUX
    displayName: "ðŸŽ¯ Linux x64"
    type: boolean
    default: true
  - name: VSCODE_BUILD_LINUX_ARM64
    displayName: "ðŸŽ¯ Linux arm64"
    type: boolean
    default: true
  - name: VSCODE_BUILD_LINUX_ARMHF
    displayName: "ðŸŽ¯ Linux armhf"
    type: boolean
    default: true
  - name: VSCODE_BUILD_ALPINE
    displayName: "ðŸŽ¯ Alpine x64"
    type: boolean
    default: true
  - name: VSCODE_BUILD_ALPINE_ARM64
    displayName: "ðŸŽ¯ Alpine arm64"
    type: boolean
    default: true
  - name: VSCODE_BUILD_MACOS
    displayName: "ðŸŽ¯ macOS x64"
    type: boolean
    default: true
  - name: VSCODE_BUILD_MACOS_ARM64
    displayName: "ðŸŽ¯ macOS arm64"
    type: boolean
    default: true
  - name: VSCODE_BUILD_MACOS_UNIVERSAL
    displayName: "ðŸŽ¯ macOS universal"
    type: boolean
    default: true
  - name: VSCODE_BUILD_WEB
    displayName: "ðŸŽ¯ Web"
    type: boolean
    default: true
  - name: VSCODE_PUBLISH
    displayName: "Publish to builds.code.visualstudio.com"
    type: boolean
    default: true
  - name: VSCODE_PUBLISH_TO_MOONCAKE
    displayName: "Publish to Azure China"
    type: boolean
    default: true
  - name: VSCODE_RELEASE
    displayName: "Release build if successful"
    type: boolean
    default: false
  - name: VSCODE_COMPILE_ONLY
    displayName: "Run Compile stage exclusively"
    type: boolean
    default: false
  - name: VSCODE_STEP_ON_IT
    displayName: "Skip tests"
    type: boolean
    default: false

variables:
  - name: VSCODE_PRIVATE_BUILD
    value: ${{ ne(variables['Build.Repository.Uri'], 'https://github.com/microsoft/vscode.git') }}
  - name: NPM_REGISTRY
    value: ${{ parameters.NPM_REGISTRY }}
  - name: VSCODE_QUALITY
    value: ${{ parameters.VSCODE_QUALITY }}
  - name: VSCODE_BUILD_STAGE_WINDOWS
    value: ${{ or(eq(parameters.VSCODE_BUILD_WIN32, true), eq(parameters.VSCODE_BUILD_WIN32_32BIT, true), eq(parameters.VSCODE_BUILD_WIN32_ARM64, true)) }}
  - name: VSCODE_BUILD_STAGE_LINUX
    value: ${{ or(eq(parameters.VSCODE_BUILD_LINUX, true), eq(parameters.VSCODE_BUILD_LINUX_ARMHF, true), eq(parameters.VSCODE_BUILD_LINUX_ARM64, true)) }}
  - name: VSCODE_BUILD_STAGE_ALPINE
    value: ${{ or(eq(parameters.VSCODE_BUILD_ALPINE, true), eq(parameters.VSCODE_BUILD_ALPINE_ARM64, true)) }}
  - name: VSCODE_BUILD_STAGE_MACOS
    value: ${{ or(eq(parameters.VSCODE_BUILD_MACOS, true), eq(parameters.VSCODE_BUILD_MACOS_ARM64, true)) }}
  - name: VSCODE_BUILD_STAGE_WEB
    value: ${{ eq(parameters.VSCODE_BUILD_WEB, true) }}
  - name: VSCODE_CIBUILD
    value: ${{ in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI') }}
  - name: VSCODE_PUBLISH
    value: ${{ and(eq(parameters.VSCODE_PUBLISH, true), eq(variables.VSCODE_CIBUILD, false), eq(parameters.VSCODE_COMPILE_ONLY, false)) }}
  - name: VSCODE_PUBLISH_TO_MOONCAKE
    value: ${{ eq(parameters.VSCODE_PUBLISH_TO_MOONCAKE, true) }}
  - name: VSCODE_SCHEDULEDBUILD
    value: ${{ eq(variables['Build.Reason'], 'Schedule') }}
  - name: VSCODE_STEP_ON_IT
    value: ${{ eq(parameters.VSCODE_STEP_ON_IT, true) }}
  - name: VSCODE_BUILD_MACOS_UNIVERSAL
    value: ${{ and(eq(parameters.VSCODE_BUILD_MACOS, true), eq(parameters.VSCODE_BUILD_MACOS_ARM64, true), eq(parameters.VSCODE_BUILD_MACOS_UNIVERSAL, true)) }}
  - name: AZURE_CDN_URL
    value: https://az764295.vo.msecnd.net
  - name: AZURE_DOCUMENTDB_ENDPOINT
    value: https://vscode.documents.azure.com:443/
  - name: MOONCAKE_CDN_URL
    value: https://vscode.cdn.azure.cn
  - name: VSCODE_MIXIN_REPO
    value: microsoft/vscode-distro
  - name: skipComponentGovernanceDetection
    value: true
  - name: Codeql.SkipTaskAutoInjection
    value: true

name: "$(Date:yyyyMMdd).$(Rev:r) (${{ parameters.VSCODE_QUALITY }})"

resources:
  containers:
    - container: vscode-bionic-x64
      image: vscodehub.azurecr.io/vscode-linux-build-agent:bionic-x64
      endpoint: VSCodeHub
      options: --user 0:0 --cap-add SYS_ADMIN
    - container: vscode-arm64
      image: vscodehub.azurecr.io/vscode-linux-build-agent:buster-arm64
      endpoint: VSCodeHub
      options: --user 0:0 --cap-add SYS_ADMIN
    - container: vscode-armhf
      image: vscodehub.azurecr.io/vscode-linux-build-agent:buster-armhf
      endpoint: VSCodeHub
      options: --user 0:0 --cap-add SYS_ADMIN
    - container: snapcraft
      image: vscodehub.azurecr.io/vscode-linux-build-agent:snapcraft-x64
      endpoint: VSCodeHub

stages:
  - stage: Compile
    jobs:
      - job: Compile
        pool: 1es-ubuntu-20.04-x64
        variables:
          VSCODE_ARCH: x64
        steps:
          - template: product-compile.yml
            parameters:
              VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}

  - stage: CompileCLI
    dependsOn: []
    jobs:
      - ${{ if eq(parameters.VSCODE_BUILD_LINUX, true) }}:
        - job: CLILinuxX64
          pool: 1es-ubuntu-20.04-x64
          steps:
            - template: ./linux/cli-build-linux.yml
              parameters:
                VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                VSCODE_BUILD_LINUX: ${{ parameters.VSCODE_BUILD_LINUX }}

      - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), or(eq(parameters.VSCODE_BUILD_LINUX_ARMHF, true), eq(parameters.VSCODE_BUILD_LINUX_ARM64, true))) }}:
        - job: CLILinuxGnuARM
          pool: 1es-ubuntu-20.04-x64
          steps:
            - template: ./linux/cli-build-linux.yml
              parameters:
                VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                VSCODE_BUILD_LINUX_ARMHF: ${{ parameters.VSCODE_BUILD_LINUX_ARMHF }}
                VSCODE_BUILD_LINUX_ARM64: ${{ parameters.VSCODE_BUILD_LINUX_ARM64 }}

      - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(parameters.VSCODE_BUILD_ALPINE, true)) }}:
        - job: CLIAlpineX64
          pool: 1es-ubuntu-20.04-x64
          steps:
            - template: ./alpine/cli-build-alpine.yml
              parameters:
                VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                VSCODE_BUILD_ALPINE: ${{ parameters.VSCODE_BUILD_ALPINE }}

      - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(parameters.VSCODE_BUILD_ALPINE_ARM64, true)) }}:
        - job: CLIAlpineARM64
          pool: 1es-ubuntu-20.04-arm64
          steps:
            - bash: sudo apt update && sudo apt install -y unzip
              displayName: Install unzip
            - template: ./alpine/cli-build-alpine.yml
              parameters:
                VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                VSCODE_BUILD_ALPINE_ARM64: ${{ parameters.VSCODE_BUILD_ALPINE_ARM64 }}

      - ${{ if eq(parameters.VSCODE_BUILD_MACOS, true) }}:
        - job: CLIMacOSX64
          pool:
            vmImage: macOS-11
          steps:
            - template: ./darwin/cli-build-darwin.yml
              parameters:
                VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                VSCODE_BUILD_MACOS: ${{ parameters.VSCODE_BUILD_MACOS }}

      - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(parameters.VSCODE_BUILD_MACOS_ARM64, true)) }}:
        - job: CLIMacOSARM64
          pool:
            vmImage: macOS-11
          steps:
            - template: ./darwin/cli-build-darwin.yml
              parameters:
                VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                VSCODE_BUILD_MACOS_ARM64: ${{ parameters.VSCODE_BUILD_MACOS_ARM64 }}

      - ${{ if eq(parameters.VSCODE_BUILD_WIN32, true) }}:
        - job: CLIWindowsX64
          pool: 1es-windows-2019-x64
          steps:
            - template: ./win32/cli-build-win32.yml
              parameters:
                VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                VSCODE_BUILD_WIN32: ${{ parameters.VSCODE_BUILD_WIN32 }}

      - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(parameters.VSCODE_BUILD_WIN32_ARM64, true)) }}:
        - job: CLIWindowsARM64
          pool: 1es-windows-2019-x64
          steps:
            - template: ./win32/cli-build-win32.yml
              parameters:
                VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                VSCODE_BUILD_WIN32_ARM64: ${{ parameters.VSCODE_BUILD_WIN32_ARM64 }}

      - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(parameters.VSCODE_BUILD_WIN32_32BIT, true)) }}:
        - job: CLIWindowsX86
          pool: 1es-windows-2019-x64
          steps:
            - template: ./win32/cli-build-win32.yml
              parameters:
                VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                VSCODE_BUILD_WIN32_32BIT: ${{ parameters.VSCODE_BUILD_WIN32_32BIT }}

  - ${{ if and(eq(parameters.VSCODE_COMPILE_ONLY, false), eq(variables['VSCODE_BUILD_STAGE_WINDOWS'], true)) }}:
    - stage: Windows
      dependsOn:
        - Compile
        - CompileCLI
      pool: 1es-windows-2019-x64
      jobs:
        - ${{ if eq(variables['VSCODE_CIBUILD'], true) }}:
          - job: WindowsUnitTests
            displayName: Unit Tests
            timeoutInMinutes: 60
            variables:
              VSCODE_ARCH: x64
            steps:
              - template: win32/product-build-win32.yml
                parameters:
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: true
                  VSCODE_RUN_INTEGRATION_TESTS: false
                  VSCODE_RUN_SMOKE_TESTS: false
          - job: WindowsIntegrationTests
            displayName: Integration Tests
            timeoutInMinutes: 60
            variables:
              VSCODE_ARCH: x64
            steps:
              - template: win32/product-build-win32.yml
                parameters:
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: false
                  VSCODE_RUN_INTEGRATION_TESTS: true
                  VSCODE_RUN_SMOKE_TESTS: false
          - job: WindowsSmokeTests
            displayName: Smoke Tests
            timeoutInMinutes: 60
            variables:
              VSCODE_ARCH: x64
            steps:
              - template: win32/product-build-win32.yml
                parameters:
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: false
                  VSCODE_RUN_INTEGRATION_TESTS: false
                  VSCODE_RUN_SMOKE_TESTS: true

        - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(parameters.VSCODE_BUILD_WIN32, true)) }}:
          - job: Windows
            timeoutInMinutes: 120
            variables:
              VSCODE_ARCH: x64
            steps:
              - template: win32/product-build-win32.yml
                parameters:
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: ${{ eq(parameters.VSCODE_STEP_ON_IT, false) }}
                  VSCODE_RUN_INTEGRATION_TESTS: ${{ eq(parameters.VSCODE_STEP_ON_IT, false) }}
                  VSCODE_RUN_SMOKE_TESTS: ${{ eq(parameters.VSCODE_STEP_ON_IT, false) }}

          - job: WindowsCLISign
            timeoutInMinutes: 90
            steps:
              - template:  win32/product-build-win32-cli-sign.yml
                parameters:
                  VSCODE_BUILD_WIN32: ${{ parameters.VSCODE_BUILD_WIN32 }}
                  VSCODE_BUILD_WIN32_ARM64: ${{ parameters.VSCODE_BUILD_WIN32_ARM64 }}
                  VSCODE_BUILD_WIN32_32BIT: ${{ parameters.VSCODE_BUILD_WIN32_32BIT }}

        - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(parameters.VSCODE_BUILD_WIN32_32BIT, true)) }}:
          - job: Windows32
            timeoutInMinutes: 120
            variables:
              VSCODE_ARCH: ia32
            steps:
              - template: win32/product-build-win32.yml
                parameters:
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: ${{ eq(parameters.VSCODE_STEP_ON_IT, false) }}
                  VSCODE_RUN_INTEGRATION_TESTS: ${{ eq(parameters.VSCODE_STEP_ON_IT, false) }}
                  VSCODE_RUN_SMOKE_TESTS: ${{ eq(parameters.VSCODE_STEP_ON_IT, false) }}

        - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(parameters.VSCODE_BUILD_WIN32_ARM64, true)) }}:
          - job: WindowsARM64
            timeoutInMinutes: 90
            variables:
              VSCODE_ARCH: arm64
            steps:
              - template: win32/product-build-win32.yml
                parameters:
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: false
                  VSCODE_RUN_INTEGRATION_TESTS: false
                  VSCODE_RUN_SMOKE_TESTS: false

  - ${{ if and(eq(parameters.VSCODE_COMPILE_ONLY, false), eq(variables['VSCODE_BUILD_STAGE_LINUX'], true)) }}:
    - stage: Linux
      dependsOn:
        - Compile
        - CompileCLI
      pool: 1es-ubuntu-20.04-x64
      jobs:
        - ${{ if eq(variables['VSCODE_CIBUILD'], true) }}:
          - job: Linuxx64UnitTest
            displayName: Unit Tests
            container: vscode-bionic-x64
            variables:
              VSCODE_ARCH: x64
              NPM_ARCH: x64
              DISPLAY: ":10"
            steps:
              - template: linux/product-build-linux.yml
                parameters:
                  VSCODE_ARCH: x64
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: true
                  VSCODE_RUN_INTEGRATION_TESTS: false
                  VSCODE_RUN_SMOKE_TESTS: false
          - job: Linuxx64IntegrationTest
            displayName: Integration Tests
            container: vscode-bionic-x64
            variables:
              VSCODE_ARCH: x64
              NPM_ARCH: x64
              DISPLAY: ":10"
            steps:
              - template: linux/product-build-linux.yml
                parameters:
                  VSCODE_ARCH: x64
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: false
                  VSCODE_RUN_INTEGRATION_TESTS: true
                  VSCODE_RUN_SMOKE_TESTS: false
          - job: Linuxx64SmokeTest
            displayName: Smoke Tests
            container: vscode-bionic-x64
            variables:
              VSCODE_ARCH: x64
              NPM_ARCH: x64
              DISPLAY: ":10"
            steps:
              - template: linux/product-build-linux.yml
                parameters:
                  VSCODE_ARCH: x64
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: false
                  VSCODE_RUN_INTEGRATION_TESTS: false
                  VSCODE_RUN_SMOKE_TESTS: true

        - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(parameters.VSCODE_BUILD_LINUX, true)) }}:
          - job: Linuxx64
            container: vscode-bionic-x64
            variables:
              VSCODE_ARCH: x64
              NPM_ARCH: x64
              DISPLAY: ":10"
            steps:
              - template: linux/product-build-linux.yml
                parameters:
                  VSCODE_ARCH: x64
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: ${{ eq(parameters.VSCODE_STEP_ON_IT, false) }}
                  VSCODE_RUN_INTEGRATION_TESTS: ${{ eq(parameters.VSCODE_STEP_ON_IT, false) }}
                  VSCODE_RUN_SMOKE_TESTS: ${{ eq(parameters.VSCODE_STEP_ON_IT, false) }}

        - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(parameters.VSCODE_BUILD_LINUX, true)) }}:
          - job: LinuxSnap
            dependsOn:
              - Linuxx64
            container: snapcraft
            variables:
              VSCODE_ARCH: x64
            steps:
              - template: linux/snap-build-linux.yml

        - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(parameters.VSCODE_BUILD_LINUX_ARMHF, true)) }}:
          - job: LinuxArmhf
            container: vscode-armhf
            variables:
              VSCODE_ARCH: armhf
              NPM_ARCH: arm
            steps:
              - template: linux/product-build-linux.yml
                parameters:
                  VSCODE_ARCH: armhf
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: false
                  VSCODE_RUN_INTEGRATION_TESTS: false
                  VSCODE_RUN_SMOKE_TESTS: false

        - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(parameters.VSCODE_BUILD_LINUX_ARM64, true)) }}:
          - job: LinuxArm64
            container: vscode-arm64
            variables:
              VSCODE_ARCH: arm64
              NPM_ARCH: arm64
            steps:
              - template: linux/product-build-linux.yml
                parameters:
                  VSCODE_ARCH: arm64
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: false
                  VSCODE_RUN_INTEGRATION_TESTS: false
                  VSCODE_RUN_SMOKE_TESTS: false

  - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(parameters.VSCODE_COMPILE_ONLY, false), eq(variables['VSCODE_BUILD_STAGE_ALPINE'], true)) }}:
    - stage: Alpine
      dependsOn:
        - Compile
        - CompileCLI
      pool: 1es-ubuntu-20.04-x64
      jobs:
        - ${{ if eq(parameters.VSCODE_BUILD_ALPINE, true) }}:
          - job: LinuxAlpine
            variables:
              VSCODE_ARCH: x64
            steps:
              - template: alpine/product-build-alpine.yml

        - ${{ if eq(parameters.VSCODE_BUILD_ALPINE_ARM64, true) }}:
          - job: LinuxAlpineArm64
            timeoutInMinutes: 120
            variables:
              VSCODE_ARCH: arm64
            steps:
              - template: alpine/product-build-alpine.yml

  - ${{ if and(eq(parameters.VSCODE_COMPILE_ONLY, false), eq(variables['VSCODE_BUILD_STAGE_MACOS'], true)) }}:
    - stage: macOS
      dependsOn:
        - Compile
        - CompileCLI
      pool:
        vmImage: macOS-11
      variables:
        BUILDSECMON_OPT_IN: true
      jobs:
        - ${{ if eq(variables['VSCODE_CIBUILD'], true) }}:
          - job: macOSUnitTest
            displayName: Unit Tests
            timeoutInMinutes: 90
            variables:
              VSCODE_ARCH: x64
            steps:
              - template: darwin/product-build-darwin.yml
                parameters:
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: true
                  VSCODE_RUN_INTEGRATION_TESTS: false
                  VSCODE_RUN_SMOKE_TESTS: false
          - job: macOSIntegrationTest
            displayName: Integration Tests
            timeoutInMinutes: 90
            variables:
              VSCODE_ARCH: x64
            steps:
              - template: darwin/product-build-darwin.yml
                parameters:
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: false
                  VSCODE_RUN_INTEGRATION_TESTS: true
                  VSCODE_RUN_SMOKE_TESTS: false
          - job: macOSSmokeTest
            displayName: Smoke Tests
            timeoutInMinutes: 90
            variables:
              VSCODE_ARCH: x64
            steps:
              - template: darwin/product-build-darwin.yml
                parameters:
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: false
                  VSCODE_RUN_INTEGRATION_TESTS: false
                  VSCODE_RUN_SMOKE_TESTS: true

        - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(parameters.VSCODE_BUILD_MACOS, true)) }}:
          - job: macOS
            timeoutInMinutes: 90
            variables:
              VSCODE_ARCH: x64
            steps:
              - template: darwin/product-build-darwin.yml
                parameters:
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: false
                  VSCODE_RUN_INTEGRATION_TESTS: false
                  VSCODE_RUN_SMOKE_TESTS: false

          - ${{ if eq(parameters.VSCODE_STEP_ON_IT, false) }}:
            - job: macOSTest
              timeoutInMinutes: 90
              variables:
                VSCODE_ARCH: x64
              steps:
                - template: darwin/product-build-darwin.yml
                  parameters:
                    VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                    VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                    VSCODE_RUN_UNIT_TESTS: ${{ eq(parameters.VSCODE_STEP_ON_IT, false) }}
                    VSCODE_RUN_INTEGRATION_TESTS: ${{ eq(parameters.VSCODE_STEP_ON_IT, false) }}
                    VSCODE_RUN_SMOKE_TESTS: ${{ eq(parameters.VSCODE_STEP_ON_IT, false) }}

          - job: macOSSign
            dependsOn:
              - macOS
            timeoutInMinutes: 90
            variables:
              VSCODE_ARCH: x64
            steps:
              - template: darwin/product-build-darwin-sign.yml

          - job: macOSCLISign
            timeoutInMinutes: 90
            steps:
              - template: darwin/product-build-darwin-cli-sign.yml
                parameters:
                  VSCODE_BUILD_MACOS: ${{ parameters.VSCODE_BUILD_MACOS }}
                  VSCODE_BUILD_MACOS_ARM64: ${{ parameters.VSCODE_BUILD_MACOS_ARM64 }}

        - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(parameters.VSCODE_BUILD_MACOS_ARM64, true)) }}:
          - job: macOSARM64
            timeoutInMinutes: 90
            variables:
              VSCODE_ARCH: arm64
            steps:
              - template: darwin/product-build-darwin.yml
                parameters:
                  VSCODE_QUALITY: ${{ variables.VSCODE_QUALITY }}
                  VSCODE_CIBUILD: ${{ variables.VSCODE_CIBUILD }}
                  VSCODE_RUN_UNIT_TESTS: false
                  VSCODE_RUN_INTEGRATION_TESTS: false
                  VSCODE_RUN_SMOKE_TESTS: false

          - job: macOSARM64Sign
            dependsOn:
              - macOSARM64
            timeoutInMinutes: 90
            variables:
              VSCODE_ARCH: arm64
            steps:
              - template: darwin/product-build-darwin-sign.yml

        - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(variables['VSCODE_BUILD_MACOS_UNIVERSAL'], true)) }}:
          - job: macOSUniversal
            dependsOn:
              - macOS
              - macOSARM64
            timeoutInMinutes: 90
            variables:
              VSCODE_ARCH: universal
            steps:
              - template: darwin/product-build-darwin-universal.yml

          - job: macOSUniversalSign
            dependsOn:
              - macOSUniversal
            timeoutInMinutes: 90
            variables:
              VSCODE_ARCH: universal
            steps:
              - template: darwin/product-build-darwin-sign.yml

  - ${{ if and(eq(variables['VSCODE_CIBUILD'], false), eq(parameters.VSCODE_COMPILE_ONLY, false), eq(variables['VSCODE_BUILD_STAGE_WEB'], true)) }}:
    - stage: Web
      dependsOn:
        - Compile
      pool: 1es-ubuntu-20.04-x64
      jobs:
        - ${{ if eq(parameters.VSCODE_BUILD_WEB, true) }}:
          - job: Web
            variables:
              VSCODE_ARCH: x64
            steps:
              - template: web/product-build-web.yml

  - ${{ if eq(variables['VSCODE_PUBLISH'], 'true') }}:
    - stage: Publish
      dependsOn:
        - Compile
      pool: 1es-ubuntu-20.04-x64
      variables:
        - name: BUILDS_API_URL
          value: $(System.CollectionUri)$(System.TeamProject)/_apis/build/builds/$(Build.BuildId)/
      jobs:
        - job: PublishBuild
          timeoutInMinutes: 180
          displayName: Publish Build
          steps:
            - template: product-publish.yml

    - ${{ if and(parameters.VSCODE_RELEASE, eq(variables['VSCODE_PRIVATE_BUILD'], false)) }}:
      - stage: ApproveRelease
        dependsOn: [] # run in parallel to compile stage
        pool: 1es-ubuntu-20.04-x64
        jobs:
          - deployment: ApproveRelease
            displayName: "Approve Release"
            environment: "vscode"
            variables:
              skipComponentGovernanceDetection: true
            strategy:
              runOnce:
                deploy:
                  steps:
                    - checkout: none

    - ${{ if or(and(parameters.VSCODE_RELEASE, eq(variables['VSCODE_PRIVATE_BUILD'], false)), and(in(parameters.VSCODE_QUALITY, 'insider', 'exploration'), eq(variables['VSCODE_SCHEDULEDBUILD'], true))) }}:
      - stage: Release
        dependsOn:
          - Publish
          - ${{ if and(parameters.VSCODE_RELEASE, eq(variables['VSCODE_PRIVATE_BUILD'], false)) }}:
            - ApproveRelease
        pool: 1es-ubuntu-20.04-x64
        jobs:
          - job: ReleaseBuild
            displayName: Release Build
            steps:
              - template: product-release.yml
                parameters:
                  VSCODE_RELEASE: ${{ parameters.VSCODE_RELEASE }}
