steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "14.x"

  - task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@3
    inputs:
      versionSpec: "1.x"

  - task: AzureKeyVault@1
    displayName: 'Azure Key Vault: Get Secrets'
    inputs:
      azureSubscription: 'ClientToolsInfra_670062 (88d5392f-a34f-4769-b405-f597fc533613)'
      KeyVaultName: ado-secrets
      SecretsFilter: 'github-distro-mixin-password'

  - script: |
      set -e
      cat << EOF > ~/.netrc
      machine github.com
      login azuredatastudio
      password $(github-distro-mixin-password)
      EOF

      git config user.email "sqltools@service.microsoft.com"
      git config user.name "AzureDataStudio"
    displayName: Prepare tooling

  - script: |
      set -e
      git remote add distro "https://github.com/$(VSCODE_MIXIN_REPO).git"
      git fetch distro
      git merge $(node -p "require('./package.json').distro")
    displayName: Merge distro

  - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
    displayName: Restore Cache - Node Modules
    inputs:
      keyfile: 'build/.cachesalt, .yarnrc, remote/.yarnrc, **/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock, !samples/**/yarn.lock'
      targetfolder: '**/node_modules, !**/node_modules/**/node_modules, !samples/**/node_modules'
      vstsFeed: 'BuildCache'

  - script: |
      set -e
      CHILD_CONCURRENCY=1 yarn --frozen-lockfile
    displayName: Install dependencies
    env:
      GITHUB_TOKEN: $(github-distro-mixin-password)
    condition: and(succeeded(), ne(variables['CacheRestored'], 'true'))

  - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
    displayName: Save Cache - Node Modules
    inputs:
      keyfile: 'build/.cachesalt, .yarnrc, remote/.yarnrc, **/yarn.lock, !**/node_modules/**/yarn.lock, !**/.*/**/yarn.lock, !samples/**/yarn.lock'
      targetfolder: '**/node_modules, !**/node_modules/**/node_modules, !samples/**/node_modules'
      vstsFeed: 'BuildCache'
    condition: and(succeeded(), ne(variables['CacheRestored'], 'true'))

  - script: |
      set -e
      yarn postinstall
    displayName: Run postinstall scripts
    condition: and(succeeded(), eq(variables['CacheRestored'], 'true'))

  - script: |
      set -e
      node build/azure-pipelines/mixin
    displayName: Mix in quality

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadPath: '$(Build.SourcesDirectory)/.build'
      artifactName: drop
      itemPattern: |
        drop/linux/server/*.tar.gz

  - script: |
      set -e
      for f in $(Build.SourcesDirectory)/.build/drop/linux/server/*.tar.gz
      do
        tar -C $(Build.SourcesDirectory)/../ -zxvf $f
        rm $f
      done
    displayName: Unzip artifacts

  - script: |
      set -e
      ./build/azure-pipelines/docker/createDrop.sh
    displayName: Create Drop

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'
    inputs:
      failOnAlert: true
